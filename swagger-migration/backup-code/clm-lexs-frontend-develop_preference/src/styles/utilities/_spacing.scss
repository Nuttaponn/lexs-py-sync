/*
This .scss loop will create "margin helpers" and "padding helpers" for use in your web projects.
It will generate several classes such as:
.mr-10 which gives margin-right 10 pixels.
.mr-15 gives MARGIN to the RIGHT 15 pixels.
.mt-15 gives MARGIN to the TOP 15 pixels and so on.
.pb-5 gives PADDING to the BOTTOM of 5 pixels
.pl-40 gives PADDING to the LEFT of 40 pixels
The first letter is "m" or "p" for MARGIN or PADDING
Second letter is "t", "b", "l", or "r" for TOP, BOTTOM, LEFT, or RIGHT
Third letter is the number of spacing in pixels. Adjust the amounts generated by editing the $spaceamounts variable below.
REF: https://gist.github.com/jacurtis/30da4bf9a6c9b9b5cc0aebac512ca7c9
*/
@use 'sass:math';

// FUTION NTO CONVERT PX TO REM
@function toRem($value) {
  @if (unitless($value)) {
    $remValue: ($value / 16) + rem;
    @return $remValue;
  } @else {
    @return $value;
  }
}

// Padding for px
.no-padding {
  padding: 0 !important;
}

@for $i from 0 through 70 {
  $padding-top: $i * 1px;
  .pt-#{$i} {
    padding-top: toRem($padding-top) !important;
  }
}

@for $i from 0 through 70 {
  $padding-bottom: $i * 1px;
  .pb-#{$i} {
    padding-bottom: toRem($padding-bottom) !important;
  }
}

@for $i from 0 through 70 {
  $padding-left: $i * 1px;
  .pl-#{$i} {
    padding-left: toRem($padding-left) !important;
  }
}

@for $i from 0 through 70 {
  $padding-right: $i * 1px;
  .pr-#{$i} {
    padding-right: toRem($padding-right) !important;
  }
}

// Margin px
.no-margin {
  margin: 0 !important;
}

@for $i from 0 through 70 {
  $margin-bottom: $i * 1px;
  .mb-#{$i} {
    margin-bottom: toRem($margin-bottom) !important;
  }
}

@for $i from 0 through 90 {
  $margin-top: $i * 1px;
  .mt-#{$i} {
    margin-top: toRem($margin-top) !important;
  }
}

@for $i from 0 through 70 {
  $margin-left: $i * 1px;
  .ml-#{$i} {
    margin-left: toRem($margin-left) !important;
  }
}

@for $i from 0 through 70 {
  $margin-right: $i * 1px;
  $margin: $i * 1px;
  .mr-#{$i} {
    margin-right: toRem($margin-right) !important;
  }
  .m-#{$i} {
    margin: toRem($margin) !important;
  }
}

// Margin em
@for $i from 1 through 20 {
  .mb-#{$i}em {
    $margin-bottom: $i * 1em;
    margin-bottom: toRem($margin-bottom) !important;
  }
  .mb-0#{$i}em {
    $dot-margin-bottom: $i * 0.1em;
    margin-bottom: toRem($dot-margin-bottom) !important;
  }
}

@for $i from 1 through 20 {
  .mt-#{$i}em {
    $margin-top: $i * 1em;
    margin-top: toRem($margin-top) !important;
  }

  .mt-0#{$i}em {
    $dot-margin-top: $i * 0.1em;
    margin-top: toRem($dot-margin-top) !important;
  }
}

@for $i from 1 through 20 {
  .ml-#{$i}em {
    $margin-left: $i * 1em;
    margin-left: toRem($margin-left) !important;
  }

  .ml-0#{$i}em {
    $dot-margin-left: $i * 0.1em;
    margin-left: toRem($dot-margin-left) !important;
  }
}

@for $i from 1 through 20 {
  .mr-#{$i}em {
    $margin-right: $i * 1em;
    margin-right: toRem($margin-right) !important;
  }

  .mr-0#{$i}em {
    $dot-margin-right: $i * 0.1em;
    margin-right: toRem($dot-margin-right) !important;
  }
}

// percentage -> width | min-width | max-width
@for $i from 1 through 100 {
  $normal-width: $i * 1%;
  $min-width: $i * 1%;
  $max-width: $i * 1%;
  .width-pct-#{$i} {
    width: $normal-width !important;
  }
  .min-width-pct-#{$i} {
    min-width: $min-width !important;
  }
  .mx-width-pct-#{$i} {
    max-width: $max-width !important;
  }
}

$step: 20;
$start: 100;
$end: 500;
@for $i from 0 through math.div(($end - $start), $step) {
  $value: $start + ($i * $step);
  .min-width-#{$value} {
    min-width: #{$value}px !important;
  }
}
