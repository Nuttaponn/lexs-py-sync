/**
 * KTB Backend for Frontend APIs.
 *
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { AccountDocumentDeedGroupsResponse } from '../model/accountDocumentDeedGroupsResponse';
// @ts-ignore
import { AccountDocumentFollowUpTaskApprovalRequest } from '../model/accountDocumentFollowUpTaskApprovalRequest';
// @ts-ignore
import { AccountDocumentResultRecordingRequest } from '../model/accountDocumentResultRecordingRequest';
// @ts-ignore
import { AccountDocumentStatusSearchRequest } from '../model/accountDocumentStatusSearchRequest';
// @ts-ignore
import { AccountDocumentValidationResponse } from '../model/accountDocumentValidationResponse';
// @ts-ignore
import { AccountDocumentsResponse } from '../model/accountDocumentsResponse';
// @ts-ignore
import { AppointmentCallbackRequest } from '../model/appointmentCallbackRequest';
// @ts-ignore
import { AppointmentCallbackResponse } from '../model/appointmentCallbackResponse';
// @ts-ignore
import { AuctionResultRecordingSubmitRequest } from '../model/auctionResultRecordingSubmitRequest';
// @ts-ignore
import { CheckAppointmentRequest } from '../model/checkAppointmentRequest';
// @ts-ignore
import { CheckAppointmentResponse } from '../model/checkAppointmentResponse';
// @ts-ignore
import { ConveyanceAccountDocumentsResultRecordingResponse } from '../model/conveyanceAccountDocumentsResultRecordingResponse';
// @ts-ignore
import { ConveyanceAnnouncesDocumentsResponse } from '../model/conveyanceAnnouncesDocumentsResponse';
// @ts-ignore
import { ConveyanceAppointmentSaveRequest } from '../model/conveyanceAppointmentSaveRequest';
// @ts-ignore
import { ConveyanceDocumentUploadResponse } from '../model/conveyanceDocumentUploadResponse';
// @ts-ignore
import { ConveyanceMasTransferResponse } from '../model/conveyanceMasTransferResponse';
// @ts-ignore
import { ConveyanceUploadDocumentRequest } from '../model/conveyanceUploadDocumentRequest';
// @ts-ignore
import { ConveyanceUploadDocumentResponse } from '../model/conveyanceUploadDocumentResponse';
// @ts-ignore
import { DocConveyanceUploadValidationResponse } from '../model/docConveyanceUploadValidationResponse';
// @ts-ignore
import { MasAppointmentInfoResponse } from '../model/masAppointmentInfoResponse';
// @ts-ignore
import { PageOfAccountDocumentStatusDto } from '../model/pageOfAccountDocumentStatusDto';
// @ts-ignore
import { PageOfAccountDocumentStatusExcelDto } from '../model/pageOfAccountDocumentStatusExcelDto';
// @ts-ignore
import { TransferOfPropertyRequest } from '../model/transferOfPropertyRequest';
// @ts-ignore
import { TransferOfPropertyResponse } from '../model/transferOfPropertyResponse';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class ConveyanceControllerService {

    protected basePath = 'https://lexsdev.krungthai/ktb/rest/lexs';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * approveAccountDocumentFollowUpTask
     * @param accountDocFollowUpId accountDocFollowUpId
     * @param taskId taskId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public approveAccountDocumentFollowUpTask(accountDocFollowUpId: number, taskId: number, request: AccountDocumentFollowUpTaskApprovalRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public approveAccountDocumentFollowUpTask(accountDocFollowUpId: number, taskId: number, request: AccountDocumentFollowUpTaskApprovalRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public approveAccountDocumentFollowUpTask(accountDocFollowUpId: number, taskId: number, request: AccountDocumentFollowUpTaskApprovalRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public approveAccountDocumentFollowUpTask(accountDocFollowUpId: number, taskId: number, request: AccountDocumentFollowUpTaskApprovalRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (accountDocFollowUpId === null || accountDocFollowUpId === undefined) {
            throw new Error('Required parameter accountDocFollowUpId was null or undefined when calling approveAccountDocumentFollowUpTask.');
        }
        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling approveAccountDocumentFollowUpTask.');
        }
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling approveAccountDocumentFollowUpTask.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/conveyance/account-documents/${this.configuration.encodeParam({name: "accountDocFollowUpId", value: accountDocFollowUpId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/result-recording/tasks/${this.configuration.encodeParam({name: "taskId", value: taskId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/approval`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * auctionResultRecordingSubmit
     * @param conveyanceDocUploadId conveyanceDocUploadId
     * @param taskId taskId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public auctionResultRecordingSubmit(conveyanceDocUploadId: number, taskId: number, request: AuctionResultRecordingSubmitRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public auctionResultRecordingSubmit(conveyanceDocUploadId: number, taskId: number, request: AuctionResultRecordingSubmitRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public auctionResultRecordingSubmit(conveyanceDocUploadId: number, taskId: number, request: AuctionResultRecordingSubmitRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public auctionResultRecordingSubmit(conveyanceDocUploadId: number, taskId: number, request: AuctionResultRecordingSubmitRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (conveyanceDocUploadId === null || conveyanceDocUploadId === undefined) {
            throw new Error('Required parameter conveyanceDocUploadId was null or undefined when calling auctionResultRecordingSubmit.');
        }
        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling auctionResultRecordingSubmit.');
        }
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling auctionResultRecordingSubmit.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/conveyance/document-uploads/${this.configuration.encodeParam({name: "conveyanceDocUploadId", value: conveyanceDocUploadId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/result-recording/tasks/${this.configuration.encodeParam({name: "taskId", value: taskId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/submit`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param checkAppointmentRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @deprecated
     */
    public checkAppointment(checkAppointmentRequest: CheckAppointmentRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<CheckAppointmentResponse>;
    public checkAppointment(checkAppointmentRequest: CheckAppointmentRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CheckAppointmentResponse>>;
    public checkAppointment(checkAppointmentRequest: CheckAppointmentRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CheckAppointmentResponse>>;
    public checkAppointment(checkAppointmentRequest: CheckAppointmentRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (checkAppointmentRequest === null || checkAppointmentRequest === undefined) {
            throw new Error('Required parameter checkAppointmentRequest was null or undefined when calling checkAppointment.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/conveyance/appointment/check-appointment`;
        return this.httpClient.request<CheckAppointmentResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: checkAppointmentRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * downloadAccountDocumentStatus
     * @param searchMode 
     * @param tab 
     * @param accountDocumentStatusDashboard 
     * @param accountNo 
     * @param amdUnit 
     * @param billNo 
     * @param blackCaseId 
     * @param caseCreator 
     * @param caseStatus 
     * @param citizenId 
     * @param court 
     * @param customerId 
     * @param customerName 
     * @param customerStatus 
     * @param customerSurname 
     * @param debtTransferTo 
     * @param debtor 
     * @param kbdId 
     * @param ledId 
     * @param legalStatus 
     * @param litigationCloseStatus 
     * @param litigationId 
     * @param loanType 
     * @param orgCode 
     * @param ownerId 
     * @param redCaseId 
     * @param responseUnit 
     * @param roomNo 
     * @param samFlag 
     * @param searchScope 
     * @param searchString 
     * @param sortBy sortBy
     * @param sortOrder sortOrder
     * @param tamcFlag 
     * @param writeOffStatus 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadAccountDocumentStatus(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountDocumentStatusDashboard?: string, accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, ledId?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<PageOfAccountDocumentStatusExcelDto>;
    public downloadAccountDocumentStatus(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountDocumentStatusDashboard?: string, accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, ledId?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PageOfAccountDocumentStatusExcelDto>>;
    public downloadAccountDocumentStatus(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountDocumentStatusDashboard?: string, accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, ledId?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PageOfAccountDocumentStatusExcelDto>>;
    public downloadAccountDocumentStatus(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountDocumentStatusDashboard?: string, accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, ledId?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (searchMode === null || searchMode === undefined) {
            throw new Error('Required parameter searchMode was null or undefined when calling downloadAccountDocumentStatus.');
        }
        if (tab === null || tab === undefined) {
            throw new Error('Required parameter tab was null or undefined when calling downloadAccountDocumentStatus.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (accountDocumentStatusDashboard !== undefined && accountDocumentStatusDashboard !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountDocumentStatusDashboard, 'accountDocumentStatusDashboard');
        }
        if (accountNo !== undefined && accountNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountNo, 'accountNo');
        }
        if (amdUnit !== undefined && amdUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>amdUnit, 'amdUnit');
        }
        if (billNo !== undefined && billNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>billNo, 'billNo');
        }
        if (blackCaseId !== undefined && blackCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blackCaseId, 'blackCaseId');
        }
        if (caseCreator !== undefined && caseCreator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseCreator, 'caseCreator');
        }
        if (caseStatus !== undefined && caseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseStatus, 'caseStatus');
        }
        if (citizenId !== undefined && citizenId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>citizenId, 'citizenId');
        }
        if (court !== undefined && court !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>court, 'court');
        }
        if (customerId !== undefined && customerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerId, 'customerId');
        }
        if (customerName !== undefined && customerName !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerName, 'customerName');
        }
        if (customerStatus !== undefined && customerStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerStatus, 'customerStatus');
        }
        if (customerSurname !== undefined && customerSurname !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerSurname, 'customerSurname');
        }
        if (debtTransferTo) {
            debtTransferTo.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'debtTransferTo');
            })
        }
        if (debtor !== undefined && debtor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>debtor, 'debtor');
        }
        if (kbdId !== undefined && kbdId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>kbdId, 'kbdId');
        }
        if (ledId !== undefined && ledId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ledId, 'ledId');
        }
        if (legalStatus !== undefined && legalStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>legalStatus, 'legalStatus');
        }
        if (litigationCloseStatus !== undefined && litigationCloseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationCloseStatus, 'litigationCloseStatus');
        }
        if (litigationId !== undefined && litigationId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationId, 'litigationId');
        }
        if (loanType) {
            loanType.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'loanType');
            })
        }
        if (orgCode !== undefined && orgCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>orgCode, 'orgCode');
        }
        if (ownerId !== undefined && ownerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ownerId, 'ownerId');
        }
        if (redCaseId !== undefined && redCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>redCaseId, 'redCaseId');
        }
        if (responseUnit !== undefined && responseUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>responseUnit, 'responseUnit');
        }
        if (roomNo !== undefined && roomNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>roomNo, 'roomNo');
        }
        if (samFlag !== undefined && samFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>samFlag, 'samFlag');
        }
        if (searchMode !== undefined && searchMode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchMode, 'searchMode');
        }
        if (searchScope !== undefined && searchScope !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchScope, 'searchScope');
        }
        if (searchString !== undefined && searchString !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchString, 'searchString');
        }
        if (sortBy) {
            sortBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sortBy');
            })
        }
        if (sortOrder !== undefined && sortOrder !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortOrder, 'sortOrder');
        }
        if (tab !== undefined && tab !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tab, 'tab');
        }
        if (tamcFlag !== undefined && tamcFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tamcFlag, 'tamcFlag');
        }
        if (writeOffStatus !== undefined && writeOffStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>writeOffStatus, 'writeOffStatus');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/conveyance/workbench/account-document-status/excel`;
        return this.httpClient.request<PageOfAccountDocumentStatusExcelDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAccountDocumentDeedGroupsByAucRef
     * @param aucRef aucRef
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAccountDocumentDeedGroupsByAucRef(aucRef: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AccountDocumentDeedGroupsResponse>;
    public getAccountDocumentDeedGroupsByAucRef(aucRef: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AccountDocumentDeedGroupsResponse>>;
    public getAccountDocumentDeedGroupsByAucRef(aucRef: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AccountDocumentDeedGroupsResponse>>;
    public getAccountDocumentDeedGroupsByAucRef(aucRef: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (aucRef === null || aucRef === undefined) {
            throw new Error('Required parameter aucRef was null or undefined when calling getAccountDocumentDeedGroupsByAucRef.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/conveyance/announces/${this.configuration.encodeParam({name: "aucRef", value: aucRef, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/account-documents/deed-groups`;
        return this.httpClient.request<AccountDocumentDeedGroupsResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAccountDocumentsByAccountDocFollowUpId
     * @param accountDocFollowUpId accountDocFollowUpId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAccountDocumentsByAccountDocFollowUpId(accountDocFollowUpId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AccountDocumentsResponse>;
    public getAccountDocumentsByAccountDocFollowUpId(accountDocFollowUpId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AccountDocumentsResponse>>;
    public getAccountDocumentsByAccountDocFollowUpId(accountDocFollowUpId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AccountDocumentsResponse>>;
    public getAccountDocumentsByAccountDocFollowUpId(accountDocFollowUpId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (accountDocFollowUpId === null || accountDocFollowUpId === undefined) {
            throw new Error('Required parameter accountDocFollowUpId was null or undefined when calling getAccountDocumentsByAccountDocFollowUpId.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/conveyance/account-documents/${this.configuration.encodeParam({name: "accountDocFollowUpId", value: accountDocFollowUpId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}`;
        return this.httpClient.request<AccountDocumentsResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAccountDocumentsByAucRef
     * @param aucRef aucRef
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAccountDocumentsByAucRef(aucRef: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AccountDocumentsResponse>;
    public getAccountDocumentsByAucRef(aucRef: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AccountDocumentsResponse>>;
    public getAccountDocumentsByAucRef(aucRef: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AccountDocumentsResponse>>;
    public getAccountDocumentsByAucRef(aucRef: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (aucRef === null || aucRef === undefined) {
            throw new Error('Required parameter aucRef was null or undefined when calling getAccountDocumentsByAucRef.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/conveyance/announces/${this.configuration.encodeParam({name: "aucRef", value: aucRef, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/account-documents`;
        return this.httpClient.request<AccountDocumentsResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getConveyanceAnnouncesDocuments
     * @param deedGroupId deedGroupId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getConveyanceAnnouncesDocuments(deedGroupId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ConveyanceAnnouncesDocumentsResponse>;
    public getConveyanceAnnouncesDocuments(deedGroupId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ConveyanceAnnouncesDocumentsResponse>>;
    public getConveyanceAnnouncesDocuments(deedGroupId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ConveyanceAnnouncesDocumentsResponse>>;
    public getConveyanceAnnouncesDocuments(deedGroupId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (deedGroupId === null || deedGroupId === undefined) {
            throw new Error('Required parameter deedGroupId was null or undefined when calling getConveyanceAnnouncesDocuments.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/conveyance/announces/${this.configuration.encodeParam({name: "deedGroupId", value: deedGroupId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/documents`;
        return this.httpClient.request<ConveyanceAnnouncesDocumentsResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getConveyanceDocumentUploads
     * @param aucRef aucRef
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getConveyanceDocumentUploads(aucRef: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ConveyanceDocumentUploadResponse>;
    public getConveyanceDocumentUploads(aucRef: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ConveyanceDocumentUploadResponse>>;
    public getConveyanceDocumentUploads(aucRef: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ConveyanceDocumentUploadResponse>>;
    public getConveyanceDocumentUploads(aucRef: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (aucRef === null || aucRef === undefined) {
            throw new Error('Required parameter aucRef was null or undefined when calling getConveyanceDocumentUploads.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/conveyance/announces/${this.configuration.encodeParam({name: "aucRef", value: aucRef, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/document-uploads`;
        return this.httpClient.request<ConveyanceDocumentUploadResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getDocumentUploads
     * @param conveyanceDocUploadId conveyanceDocUploadId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDocumentUploads(conveyanceDocUploadId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ConveyanceDocumentUploadResponse>;
    public getDocumentUploads(conveyanceDocUploadId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ConveyanceDocumentUploadResponse>>;
    public getDocumentUploads(conveyanceDocUploadId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ConveyanceDocumentUploadResponse>>;
    public getDocumentUploads(conveyanceDocUploadId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (conveyanceDocUploadId === null || conveyanceDocUploadId === undefined) {
            throw new Error('Required parameter conveyanceDocUploadId was null or undefined when calling getDocumentUploads.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/conveyance/document-uploads/${this.configuration.encodeParam({name: "conveyanceDocUploadId", value: conveyanceDocUploadId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}`;
        return this.httpClient.request<ConveyanceDocumentUploadResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getMasAppointmentInfo
     * @param deedGroupId deedGroupId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMasAppointmentInfo(deedGroupId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<MasAppointmentInfoResponse>>;
    public getMasAppointmentInfo(deedGroupId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<MasAppointmentInfoResponse>>>;
    public getMasAppointmentInfo(deedGroupId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<MasAppointmentInfoResponse>>>;
    public getMasAppointmentInfo(deedGroupId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (deedGroupId === null || deedGroupId === undefined) {
            throw new Error('Required parameter deedGroupId was null or undefined when calling getMasAppointmentInfo.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/conveyance/mas/${this.configuration.encodeParam({name: "deedGroupId", value: deedGroupId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/appointment-info`;
        return this.httpClient.request<Array<MasAppointmentInfoResponse>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getMasTransferProperty
     * @param deedGroupId deedGroupId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMasTransferProperty(deedGroupId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ConveyanceMasTransferResponse>;
    public getMasTransferProperty(deedGroupId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ConveyanceMasTransferResponse>>;
    public getMasTransferProperty(deedGroupId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ConveyanceMasTransferResponse>>;
    public getMasTransferProperty(deedGroupId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (deedGroupId === null || deedGroupId === undefined) {
            throw new Error('Required parameter deedGroupId was null or undefined when calling getMasTransferProperty.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/conveyance/mas/deedGroups/${this.configuration.encodeParam({name: "deedGroupId", value: deedGroupId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/transfer-property`;
        return this.httpClient.request<ConveyanceMasTransferResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * inquiryAccountDocumentStatus
     * @param searchMode 
     * @param tab 
     * @param accountDocumentStatusDashboard 
     * @param accountNo 
     * @param amdUnit 
     * @param billNo 
     * @param blackCaseId 
     * @param caseCreator 
     * @param caseStatus 
     * @param citizenId 
     * @param court 
     * @param customerId 
     * @param customerName 
     * @param customerStatus 
     * @param customerSurname 
     * @param debtTransferTo 
     * @param debtor 
     * @param kbdId 
     * @param ledId 
     * @param legalStatus 
     * @param litigationCloseStatus 
     * @param litigationId 
     * @param loanType 
     * @param orgCode 
     * @param ownerId 
     * @param page page
     * @param redCaseId 
     * @param responseUnit 
     * @param roomNo 
     * @param samFlag 
     * @param searchScope 
     * @param searchString 
     * @param size size
     * @param sortBy sortBy
     * @param sortOrder sortOrder
     * @param tamcFlag 
     * @param writeOffStatus 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public inquiryAccountDocumentStatus(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountDocumentStatusDashboard?: string, accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, ledId?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PageOfAccountDocumentStatusDto>;
    public inquiryAccountDocumentStatus(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountDocumentStatusDashboard?: string, accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, ledId?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PageOfAccountDocumentStatusDto>>;
    public inquiryAccountDocumentStatus(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountDocumentStatusDashboard?: string, accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, ledId?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PageOfAccountDocumentStatusDto>>;
    public inquiryAccountDocumentStatus(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountDocumentStatusDashboard?: string, accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, ledId?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (searchMode === null || searchMode === undefined) {
            throw new Error('Required parameter searchMode was null or undefined when calling inquiryAccountDocumentStatus.');
        }
        if (tab === null || tab === undefined) {
            throw new Error('Required parameter tab was null or undefined when calling inquiryAccountDocumentStatus.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (accountDocumentStatusDashboard !== undefined && accountDocumentStatusDashboard !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountDocumentStatusDashboard, 'accountDocumentStatusDashboard');
        }
        if (accountNo !== undefined && accountNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountNo, 'accountNo');
        }
        if (amdUnit !== undefined && amdUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>amdUnit, 'amdUnit');
        }
        if (billNo !== undefined && billNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>billNo, 'billNo');
        }
        if (blackCaseId !== undefined && blackCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blackCaseId, 'blackCaseId');
        }
        if (caseCreator !== undefined && caseCreator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseCreator, 'caseCreator');
        }
        if (caseStatus !== undefined && caseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseStatus, 'caseStatus');
        }
        if (citizenId !== undefined && citizenId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>citizenId, 'citizenId');
        }
        if (court !== undefined && court !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>court, 'court');
        }
        if (customerId !== undefined && customerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerId, 'customerId');
        }
        if (customerName !== undefined && customerName !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerName, 'customerName');
        }
        if (customerStatus !== undefined && customerStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerStatus, 'customerStatus');
        }
        if (customerSurname !== undefined && customerSurname !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerSurname, 'customerSurname');
        }
        if (debtTransferTo) {
            debtTransferTo.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'debtTransferTo');
            })
        }
        if (debtor !== undefined && debtor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>debtor, 'debtor');
        }
        if (kbdId !== undefined && kbdId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>kbdId, 'kbdId');
        }
        if (ledId !== undefined && ledId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ledId, 'ledId');
        }
        if (legalStatus !== undefined && legalStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>legalStatus, 'legalStatus');
        }
        if (litigationCloseStatus !== undefined && litigationCloseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationCloseStatus, 'litigationCloseStatus');
        }
        if (litigationId !== undefined && litigationId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationId, 'litigationId');
        }
        if (loanType) {
            loanType.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'loanType');
            })
        }
        if (orgCode !== undefined && orgCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>orgCode, 'orgCode');
        }
        if (ownerId !== undefined && ownerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ownerId, 'ownerId');
        }
        if (page !== undefined && page !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>page, 'page');
        }
        if (redCaseId !== undefined && redCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>redCaseId, 'redCaseId');
        }
        if (responseUnit !== undefined && responseUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>responseUnit, 'responseUnit');
        }
        if (roomNo !== undefined && roomNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>roomNo, 'roomNo');
        }
        if (samFlag !== undefined && samFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>samFlag, 'samFlag');
        }
        if (searchMode !== undefined && searchMode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchMode, 'searchMode');
        }
        if (searchScope !== undefined && searchScope !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchScope, 'searchScope');
        }
        if (searchString !== undefined && searchString !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchString, 'searchString');
        }
        if (size !== undefined && size !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>size, 'size');
        }
        if (sortBy) {
            sortBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sortBy');
            })
        }
        if (sortOrder !== undefined && sortOrder !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortOrder, 'sortOrder');
        }
        if (tab !== undefined && tab !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tab, 'tab');
        }
        if (tamcFlag !== undefined && tamcFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tamcFlag, 'tamcFlag');
        }
        if (writeOffStatus !== undefined && writeOffStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>writeOffStatus, 'writeOffStatus');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/conveyance/workbench/account-document-status`;
        return this.httpClient.request<PageOfAccountDocumentStatusDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * postAppointmentCallback
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postAppointmentCallback(request: AppointmentCallbackRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AppointmentCallbackResponse>;
    public postAppointmentCallback(request: AppointmentCallbackRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AppointmentCallbackResponse>>;
    public postAppointmentCallback(request: AppointmentCallbackRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AppointmentCallbackResponse>>;
    public postAppointmentCallback(request: AppointmentCallbackRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling postAppointmentCallback.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/conveyance/mas/AppointmentCallbackService`;
        return this.httpClient.request<AppointmentCallbackResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * postConveyanceDocumentUpload
     * @param aucRef aucRef
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postConveyanceDocumentUpload(aucRef: number, request: ConveyanceUploadDocumentRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ConveyanceUploadDocumentResponse>;
    public postConveyanceDocumentUpload(aucRef: number, request: ConveyanceUploadDocumentRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ConveyanceUploadDocumentResponse>>;
    public postConveyanceDocumentUpload(aucRef: number, request: ConveyanceUploadDocumentRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ConveyanceUploadDocumentResponse>>;
    public postConveyanceDocumentUpload(aucRef: number, request: ConveyanceUploadDocumentRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (aucRef === null || aucRef === undefined) {
            throw new Error('Required parameter aucRef was null or undefined when calling postConveyanceDocumentUpload.');
        }
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling postConveyanceDocumentUpload.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/conveyance/announces/${this.configuration.encodeParam({name: "aucRef", value: aucRef, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/document-uploads`;
        return this.httpClient.request<ConveyanceUploadDocumentResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * postResultRecording
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postResultRecording(request: AccountDocumentResultRecordingRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ConveyanceAccountDocumentsResultRecordingResponse>;
    public postResultRecording(request: AccountDocumentResultRecordingRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ConveyanceAccountDocumentsResultRecordingResponse>>;
    public postResultRecording(request: AccountDocumentResultRecordingRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ConveyanceAccountDocumentsResultRecordingResponse>>;
    public postResultRecording(request: AccountDocumentResultRecordingRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling postResultRecording.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/conveyance/account-documents/result-recording`;
        return this.httpClient.request<ConveyanceAccountDocumentsResultRecordingResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * postResultRecordingTasksSubmit
     * @param accountDocFollowUpId accountDocFollowUpId
     * @param taskId taskId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postResultRecordingTasksSubmit(accountDocFollowUpId: number, taskId: number, request: AccountDocumentResultRecordingRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public postResultRecordingTasksSubmit(accountDocFollowUpId: number, taskId: number, request: AccountDocumentResultRecordingRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public postResultRecordingTasksSubmit(accountDocFollowUpId: number, taskId: number, request: AccountDocumentResultRecordingRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public postResultRecordingTasksSubmit(accountDocFollowUpId: number, taskId: number, request: AccountDocumentResultRecordingRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (accountDocFollowUpId === null || accountDocFollowUpId === undefined) {
            throw new Error('Required parameter accountDocFollowUpId was null or undefined when calling postResultRecordingTasksSubmit.');
        }
        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling postResultRecordingTasksSubmit.');
        }
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling postResultRecordingTasksSubmit.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/conveyance/account-documents/${this.configuration.encodeParam({name: "accountDocFollowUpId", value: accountDocFollowUpId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/result-recording/tasks/${this.configuration.encodeParam({name: "taskId", value: taskId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/submit`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveConveyanceAppointment
     * @param appointmentId appointmentId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @deprecated
     */
    public saveConveyanceAppointment(appointmentId: number, request: ConveyanceAppointmentSaveRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public saveConveyanceAppointment(appointmentId: number, request: ConveyanceAppointmentSaveRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public saveConveyanceAppointment(appointmentId: number, request: ConveyanceAppointmentSaveRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public saveConveyanceAppointment(appointmentId: number, request: ConveyanceAppointmentSaveRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (appointmentId === null || appointmentId === undefined) {
            throw new Error('Required parameter appointmentId was null or undefined when calling saveConveyanceAppointment.');
        }
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling saveConveyanceAppointment.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/conveyance/appointment/${this.configuration.encodeParam({name: "appointmentId", value: appointmentId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/save`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * transferOfProperty
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public transferOfProperty(request: TransferOfPropertyRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<TransferOfPropertyResponse>;
    public transferOfProperty(request: TransferOfPropertyRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<TransferOfPropertyResponse>>;
    public transferOfProperty(request: TransferOfPropertyRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<TransferOfPropertyResponse>>;
    public transferOfProperty(request: TransferOfPropertyRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling transferOfProperty.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/conveyance/mas/TransferOfPropertyCallbackService`;
        return this.httpClient.request<TransferOfPropertyResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param aucRef 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public validateAccountDocumentFollowupProcess(aucRef: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AccountDocumentValidationResponse>;
    public validateAccountDocumentFollowupProcess(aucRef: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AccountDocumentValidationResponse>>;
    public validateAccountDocumentFollowupProcess(aucRef: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AccountDocumentValidationResponse>>;
    public validateAccountDocumentFollowupProcess(aucRef: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (aucRef === null || aucRef === undefined) {
            throw new Error('Required parameter aucRef was null or undefined when calling validateAccountDocumentFollowupProcess.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/conveyance/announces/${this.configuration.encodeParam({name: "aucRef", value: aucRef, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/account-documents/validate`;
        return this.httpClient.request<AccountDocumentValidationResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param aucRef 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public validateDocumentConveyanceUploads(aucRef: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<DocConveyanceUploadValidationResponse>;
    public validateDocumentConveyanceUploads(aucRef: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<DocConveyanceUploadValidationResponse>>;
    public validateDocumentConveyanceUploads(aucRef: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<DocConveyanceUploadValidationResponse>>;
    public validateDocumentConveyanceUploads(aucRef: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (aucRef === null || aucRef === undefined) {
            throw new Error('Required parameter aucRef was null or undefined when calling validateDocumentConveyanceUploads.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/conveyance/announces/${this.configuration.encodeParam({name: "aucRef", value: aucRef, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/document-uploads/validate`;
        return this.httpClient.request<DocConveyanceUploadValidationResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
