/**
 * KTB Backend for Frontend APIs.
 *
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { LexsUserTransferOption } from '../model/lexsUserTransferOption';
// @ts-ignore
import { PageOfTaskDto } from '../model/pageOfTaskDto';
// @ts-ignore
import { Task } from '../model/task';
// @ts-ignore
import { TaskDetailDto } from '../model/taskDetailDto';
// @ts-ignore
import { TaskInquiryRequest } from '../model/taskInquiryRequest';
// @ts-ignore
import { TaskTransferRequest } from '../model/taskTransferRequest';
// @ts-ignore
import { TaskUserRequest } from '../model/taskUserRequest';
// @ts-ignore
import { UnholdPageResponse } from '../model/unholdPageResponse';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class TaskControllerService {

    protected basePath = 'https://lexsdev.krungthai/ktb/rest/lexs';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public countUnassignedTask(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<number>;
    public countUnassignedTask(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<number>>;
    public countUnassignedTask(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<number>>;
    public countUnassignedTask(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/task/count-unassigned-task`;
        return this.httpClient.request<number>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadSLAReport(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<string>;
    public downloadSLAReport(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<string>>;
    public downloadSLAReport(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<string>>;
    public downloadSLAReport(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/task/sla-report/excel`;
        return this.httpClient.request<string>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param taskId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public inquiryTaskDetails(taskId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<TaskDetailDto>;
    public inquiryTaskDetails(taskId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<TaskDetailDto>>;
    public inquiryTaskDetails(taskId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<TaskDetailDto>>;
    public inquiryTaskDetails(taskId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling inquiryTaskDetails.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/task/${this.configuration.encodeParam({name: "taskId", value: taskId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}`;
        return this.httpClient.request<TaskDetailDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * inquiryTasks
     * @param searchMode 
     * @param tab 
     * @param accountNo 
     * @param amdUnit 
     * @param billNo 
     * @param blackCaseId 
     * @param caseCreator 
     * @param caseStatus 
     * @param citizenId 
     * @param court 
     * @param customerId 
     * @param customerName 
     * @param customerSurname 
     * @param debtTransferTo 
     * @param debtor 
     * @param kbdId 
     * @param litigationCloseStatus 
     * @param litigationId 
     * @param loanType 
     * @param orgCode 
     * @param ownerId 
     * @param page page
     * @param redCaseId 
     * @param responseUnit 
     * @param roomNo 
     * @param samFlag 
     * @param searchScope 
     * @param searchString 
     * @param size size
     * @param sortBy sortBy
     * @param sortOrder sortOrder
     * @param status 
     * @param tamcFlag 
     * @param type 
     * @param writeOffStatus 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public inquiryTasks(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, status?: string, tamcFlag?: string, type?: string, writeOffStatus?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PageOfTaskDto>;
    public inquiryTasks(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, status?: string, tamcFlag?: string, type?: string, writeOffStatus?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PageOfTaskDto>>;
    public inquiryTasks(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, status?: string, tamcFlag?: string, type?: string, writeOffStatus?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PageOfTaskDto>>;
    public inquiryTasks(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, status?: string, tamcFlag?: string, type?: string, writeOffStatus?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (searchMode === null || searchMode === undefined) {
            throw new Error('Required parameter searchMode was null or undefined when calling inquiryTasks.');
        }
        if (tab === null || tab === undefined) {
            throw new Error('Required parameter tab was null or undefined when calling inquiryTasks.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (accountNo !== undefined && accountNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountNo, 'accountNo');
        }
        if (amdUnit !== undefined && amdUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>amdUnit, 'amdUnit');
        }
        if (billNo !== undefined && billNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>billNo, 'billNo');
        }
        if (blackCaseId !== undefined && blackCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blackCaseId, 'blackCaseId');
        }
        if (caseCreator !== undefined && caseCreator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseCreator, 'caseCreator');
        }
        if (caseStatus !== undefined && caseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseStatus, 'caseStatus');
        }
        if (citizenId !== undefined && citizenId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>citizenId, 'citizenId');
        }
        if (court !== undefined && court !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>court, 'court');
        }
        if (customerId !== undefined && customerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerId, 'customerId');
        }
        if (customerName !== undefined && customerName !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerName, 'customerName');
        }
        if (customerSurname !== undefined && customerSurname !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerSurname, 'customerSurname');
        }
        if (debtTransferTo) {
            debtTransferTo.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'debtTransferTo');
            })
        }
        if (debtor !== undefined && debtor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>debtor, 'debtor');
        }
        if (kbdId !== undefined && kbdId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>kbdId, 'kbdId');
        }
        if (litigationCloseStatus !== undefined && litigationCloseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationCloseStatus, 'litigationCloseStatus');
        }
        if (litigationId !== undefined && litigationId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationId, 'litigationId');
        }
        if (loanType) {
            loanType.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'loanType');
            })
        }
        if (orgCode !== undefined && orgCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>orgCode, 'orgCode');
        }
        if (ownerId !== undefined && ownerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ownerId, 'ownerId');
        }
        if (page !== undefined && page !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>page, 'page');
        }
        if (redCaseId !== undefined && redCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>redCaseId, 'redCaseId');
        }
        if (responseUnit !== undefined && responseUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>responseUnit, 'responseUnit');
        }
        if (roomNo !== undefined && roomNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>roomNo, 'roomNo');
        }
        if (samFlag !== undefined && samFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>samFlag, 'samFlag');
        }
        if (searchMode !== undefined && searchMode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchMode, 'searchMode');
        }
        if (searchScope !== undefined && searchScope !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchScope, 'searchScope');
        }
        if (searchString !== undefined && searchString !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchString, 'searchString');
        }
        if (size !== undefined && size !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>size, 'size');
        }
        if (sortBy) {
            sortBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sortBy');
            })
        }
        if (sortOrder !== undefined && sortOrder !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortOrder, 'sortOrder');
        }
        if (status !== undefined && status !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>status, 'status');
        }
        if (tab !== undefined && tab !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tab, 'tab');
        }
        if (tamcFlag !== undefined && tamcFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tamcFlag, 'tamcFlag');
        }
        if (type !== undefined && type !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>type, 'type');
        }
        if (writeOffStatus !== undefined && writeOffStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>writeOffStatus, 'writeOffStatus');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/task`;
        return this.httpClient.request<PageOfTaskDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * inquiryTasksDownload
     * @param searchMode 
     * @param tab 
     * @param accountNo 
     * @param amdUnit 
     * @param billNo 
     * @param blackCaseId 
     * @param caseCreator 
     * @param caseStatus 
     * @param citizenId 
     * @param court 
     * @param customerId 
     * @param customerName 
     * @param customerSurname 
     * @param debtTransferTo 
     * @param debtor 
     * @param kbdId 
     * @param litigationCloseStatus 
     * @param litigationId 
     * @param loanType 
     * @param orgCode 
     * @param ownerId 
     * @param page page
     * @param redCaseId 
     * @param responseUnit 
     * @param roomNo 
     * @param samFlag 
     * @param searchScope 
     * @param searchString 
     * @param size size
     * @param sortBy sortBy
     * @param sortOrder sortOrder
     * @param status 
     * @param tamcFlag 
     * @param type 
     * @param writeOffStatus 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public inquiryTasksDownload(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, status?: string, tamcFlag?: string, type?: string, writeOffStatus?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<PageOfTaskDto>;
    public inquiryTasksDownload(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, status?: string, tamcFlag?: string, type?: string, writeOffStatus?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PageOfTaskDto>>;
    public inquiryTasksDownload(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, status?: string, tamcFlag?: string, type?: string, writeOffStatus?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PageOfTaskDto>>;
    public inquiryTasksDownload(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, status?: string, tamcFlag?: string, type?: string, writeOffStatus?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (searchMode === null || searchMode === undefined) {
            throw new Error('Required parameter searchMode was null or undefined when calling inquiryTasksDownload.');
        }
        if (tab === null || tab === undefined) {
            throw new Error('Required parameter tab was null or undefined when calling inquiryTasksDownload.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (accountNo !== undefined && accountNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountNo, 'accountNo');
        }
        if (amdUnit !== undefined && amdUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>amdUnit, 'amdUnit');
        }
        if (billNo !== undefined && billNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>billNo, 'billNo');
        }
        if (blackCaseId !== undefined && blackCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blackCaseId, 'blackCaseId');
        }
        if (caseCreator !== undefined && caseCreator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseCreator, 'caseCreator');
        }
        if (caseStatus !== undefined && caseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseStatus, 'caseStatus');
        }
        if (citizenId !== undefined && citizenId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>citizenId, 'citizenId');
        }
        if (court !== undefined && court !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>court, 'court');
        }
        if (customerId !== undefined && customerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerId, 'customerId');
        }
        if (customerName !== undefined && customerName !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerName, 'customerName');
        }
        if (customerSurname !== undefined && customerSurname !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerSurname, 'customerSurname');
        }
        if (debtTransferTo) {
            debtTransferTo.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'debtTransferTo');
            })
        }
        if (debtor !== undefined && debtor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>debtor, 'debtor');
        }
        if (kbdId !== undefined && kbdId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>kbdId, 'kbdId');
        }
        if (litigationCloseStatus !== undefined && litigationCloseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationCloseStatus, 'litigationCloseStatus');
        }
        if (litigationId !== undefined && litigationId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationId, 'litigationId');
        }
        if (loanType) {
            loanType.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'loanType');
            })
        }
        if (orgCode !== undefined && orgCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>orgCode, 'orgCode');
        }
        if (ownerId !== undefined && ownerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ownerId, 'ownerId');
        }
        if (page !== undefined && page !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>page, 'page');
        }
        if (redCaseId !== undefined && redCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>redCaseId, 'redCaseId');
        }
        if (responseUnit !== undefined && responseUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>responseUnit, 'responseUnit');
        }
        if (roomNo !== undefined && roomNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>roomNo, 'roomNo');
        }
        if (samFlag !== undefined && samFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>samFlag, 'samFlag');
        }
        if (searchMode !== undefined && searchMode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchMode, 'searchMode');
        }
        if (searchScope !== undefined && searchScope !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchScope, 'searchScope');
        }
        if (searchString !== undefined && searchString !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchString, 'searchString');
        }
        if (size !== undefined && size !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>size, 'size');
        }
        if (sortBy) {
            sortBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sortBy');
            })
        }
        if (sortOrder !== undefined && sortOrder !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortOrder, 'sortOrder');
        }
        if (status !== undefined && status !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>status, 'status');
        }
        if (tab !== undefined && tab !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tab, 'tab');
        }
        if (tamcFlag !== undefined && tamcFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tamcFlag, 'tamcFlag');
        }
        if (type !== undefined && type !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>type, 'type');
        }
        if (writeOffStatus !== undefined && writeOffStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>writeOffStatus, 'writeOffStatus');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/task/excel`;
        return this.httpClient.request<PageOfTaskDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * inquiryUnassignedTask
     * @param searchMode 
     * @param tab 
     * @param accountNo 
     * @param amdUnit 
     * @param billNo 
     * @param blackCaseId 
     * @param caseCreator 
     * @param caseStatus 
     * @param citizenId 
     * @param court 
     * @param customerId 
     * @param customerName 
     * @param customerSurname 
     * @param debtTransferTo 
     * @param debtor 
     * @param kbdId 
     * @param litigationCloseStatus 
     * @param litigationId 
     * @param loanType 
     * @param orgCode 
     * @param ownerId 
     * @param page page
     * @param redCaseId 
     * @param responseUnit 
     * @param roomNo 
     * @param samFlag 
     * @param searchScope 
     * @param searchString 
     * @param size size
     * @param sortBy sortBy
     * @param sortOrder sortOrder
     * @param status 
     * @param tamcFlag 
     * @param type 
     * @param writeOffStatus 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public inquiryUnassignedTask(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, status?: string, tamcFlag?: string, type?: string, writeOffStatus?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PageOfTaskDto>;
    public inquiryUnassignedTask(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, status?: string, tamcFlag?: string, type?: string, writeOffStatus?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PageOfTaskDto>>;
    public inquiryUnassignedTask(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, status?: string, tamcFlag?: string, type?: string, writeOffStatus?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PageOfTaskDto>>;
    public inquiryUnassignedTask(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, status?: string, tamcFlag?: string, type?: string, writeOffStatus?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (searchMode === null || searchMode === undefined) {
            throw new Error('Required parameter searchMode was null or undefined when calling inquiryUnassignedTask.');
        }
        if (tab === null || tab === undefined) {
            throw new Error('Required parameter tab was null or undefined when calling inquiryUnassignedTask.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (accountNo !== undefined && accountNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountNo, 'accountNo');
        }
        if (amdUnit !== undefined && amdUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>amdUnit, 'amdUnit');
        }
        if (billNo !== undefined && billNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>billNo, 'billNo');
        }
        if (blackCaseId !== undefined && blackCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blackCaseId, 'blackCaseId');
        }
        if (caseCreator !== undefined && caseCreator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseCreator, 'caseCreator');
        }
        if (caseStatus !== undefined && caseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseStatus, 'caseStatus');
        }
        if (citizenId !== undefined && citizenId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>citizenId, 'citizenId');
        }
        if (court !== undefined && court !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>court, 'court');
        }
        if (customerId !== undefined && customerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerId, 'customerId');
        }
        if (customerName !== undefined && customerName !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerName, 'customerName');
        }
        if (customerSurname !== undefined && customerSurname !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerSurname, 'customerSurname');
        }
        if (debtTransferTo) {
            debtTransferTo.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'debtTransferTo');
            })
        }
        if (debtor !== undefined && debtor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>debtor, 'debtor');
        }
        if (kbdId !== undefined && kbdId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>kbdId, 'kbdId');
        }
        if (litigationCloseStatus !== undefined && litigationCloseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationCloseStatus, 'litigationCloseStatus');
        }
        if (litigationId !== undefined && litigationId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationId, 'litigationId');
        }
        if (loanType) {
            loanType.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'loanType');
            })
        }
        if (orgCode !== undefined && orgCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>orgCode, 'orgCode');
        }
        if (ownerId !== undefined && ownerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ownerId, 'ownerId');
        }
        if (page !== undefined && page !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>page, 'page');
        }
        if (redCaseId !== undefined && redCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>redCaseId, 'redCaseId');
        }
        if (responseUnit !== undefined && responseUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>responseUnit, 'responseUnit');
        }
        if (roomNo !== undefined && roomNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>roomNo, 'roomNo');
        }
        if (samFlag !== undefined && samFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>samFlag, 'samFlag');
        }
        if (searchMode !== undefined && searchMode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchMode, 'searchMode');
        }
        if (searchScope !== undefined && searchScope !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchScope, 'searchScope');
        }
        if (searchString !== undefined && searchString !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchString, 'searchString');
        }
        if (size !== undefined && size !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>size, 'size');
        }
        if (sortBy) {
            sortBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sortBy');
            })
        }
        if (sortOrder !== undefined && sortOrder !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortOrder, 'sortOrder');
        }
        if (status !== undefined && status !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>status, 'status');
        }
        if (tab !== undefined && tab !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tab, 'tab');
        }
        if (tamcFlag !== undefined && tamcFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tamcFlag, 'tamcFlag');
        }
        if (type !== undefined && type !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>type, 'type');
        }
        if (writeOffStatus !== undefined && writeOffStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>writeOffStatus, 'writeOffStatus');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/task/unassigned-task`;
        return this.httpClient.request<PageOfTaskDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * selfAssignTask
     * @param taskId taskId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public selfAssignTask(taskId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Task>;
    public selfAssignTask(taskId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Task>>;
    public selfAssignTask(taskId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Task>>;
    public selfAssignTask(taskId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling selfAssignTask.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/task/self-assign-task/${this.configuration.encodeParam({name: "taskId", value: taskId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}`;
        return this.httpClient.request<Task>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * transferExpenseTask
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public transferExpenseTask(request: TaskTransferRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public transferExpenseTask(request: TaskTransferRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public transferExpenseTask(request: TaskTransferRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public transferExpenseTask(request: TaskTransferRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling transferExpenseTask.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/task/expense/transfer`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * transferTask
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public transferTask(request: TaskTransferRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public transferTask(request: TaskTransferRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public transferTask(request: TaskTransferRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public transferTask(request: TaskTransferRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling transferTask.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/task/transfer`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * transferTaskUserOption
     * @param taskTransferRequest taskTransferRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public transferTaskUserOption(taskTransferRequest: TaskUserRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<LexsUserTransferOption>>;
    public transferTaskUserOption(taskTransferRequest: TaskUserRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<LexsUserTransferOption>>>;
    public transferTaskUserOption(taskTransferRequest: TaskUserRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<LexsUserTransferOption>>>;
    public transferTaskUserOption(taskTransferRequest: TaskUserRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (taskTransferRequest === null || taskTransferRequest === undefined) {
            throw new Error('Required parameter taskTransferRequest was null or undefined when calling transferTaskUserOption.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/task/transfer/user`;
        return this.httpClient.request<Array<LexsUserTransferOption>>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: taskTransferRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param taskId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public unHoldPageSession(taskId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<UnholdPageResponse>;
    public unHoldPageSession(taskId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<UnholdPageResponse>>;
    public unHoldPageSession(taskId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<UnholdPageResponse>>;
    public unHoldPageSession(taskId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling unHoldPageSession.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/task/${this.configuration.encodeParam({name: "taskId", value: taskId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/unhold-page-session`;
        return this.httpClient.request<UnholdPageResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
