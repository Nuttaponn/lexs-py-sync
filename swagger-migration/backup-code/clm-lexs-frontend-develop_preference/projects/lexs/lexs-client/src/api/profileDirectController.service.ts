/**
 * KTB Backend for Frontend APIs.
 *
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { Account } from '../model/account';
// @ts-ignore
import { BatchDataDto } from '../model/batchDataDto';
// @ts-ignore
import { BatchDataRequest } from '../model/batchDataRequest';
// @ts-ignore
import { CommonResponse } from '../model/commonResponse';
// @ts-ignore
import { ErrorsList } from '../model/errorsList';
// @ts-ignore
import { PageOfBatchDataDto } from '../model/pageOfBatchDataDto';
// @ts-ignore
import { ProfileDirectResponse } from '../model/profileDirectResponse';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class ProfileDirectControllerService {

    protected basePath = 'https://lexsdev.krungthai/ktb/rest/lexs';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * download
     * Enhance api accountNo is meaning accountId
     * @param accountDataType accountDataType
     * @param cifNo cifNo
     * @param accountNo accountNo
     * @param litigationId litigationId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public download(accountDataType: 'ACCOUNT_LIST' | 'ACCOUNT_OVERVIEW' | 'ACCOUNT_HISTORY' | 'INTEREST_CHANGE_SUMMARY_REPORT' | 'STATEMENT' | 'OUTSTANDING_REPORT', cifNo: string, accountNo?: string, litigationId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<string>;
    public download(accountDataType: 'ACCOUNT_LIST' | 'ACCOUNT_OVERVIEW' | 'ACCOUNT_HISTORY' | 'INTEREST_CHANGE_SUMMARY_REPORT' | 'STATEMENT' | 'OUTSTANDING_REPORT', cifNo: string, accountNo?: string, litigationId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<string>>;
    public download(accountDataType: 'ACCOUNT_LIST' | 'ACCOUNT_OVERVIEW' | 'ACCOUNT_HISTORY' | 'INTEREST_CHANGE_SUMMARY_REPORT' | 'STATEMENT' | 'OUTSTANDING_REPORT', cifNo: string, accountNo?: string, litigationId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<string>>;
    public download(accountDataType: 'ACCOUNT_LIST' | 'ACCOUNT_OVERVIEW' | 'ACCOUNT_HISTORY' | 'INTEREST_CHANGE_SUMMARY_REPORT' | 'STATEMENT' | 'OUTSTANDING_REPORT', cifNo: string, accountNo?: string, litigationId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (accountDataType === null || accountDataType === undefined) {
            throw new Error('Required parameter accountDataType was null or undefined when calling download.');
        }
        if (cifNo === null || cifNo === undefined) {
            throw new Error('Required parameter cifNo was null or undefined when calling download.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (accountDataType !== undefined && accountDataType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountDataType, 'accountDataType');
        }
        if (accountNo !== undefined && accountNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountNo, 'accountNo');
        }
        if (cifNo !== undefined && cifNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cifNo, 'cifNo');
        }
        if (litigationId !== undefined && litigationId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationId, 'litigationId');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/profile-direct/download`;
        return this.httpClient.request<string>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * inquiryAccount
     * @param cifNo cifNo
     * @param accountDataType accountDataType
     * @param litigationId litigationId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public inquiryAccount(cifNo: string, accountDataType?: 'ACCOUNT_LIST' | 'ACCOUNT_OVERVIEW' | 'ACCOUNT_HISTORY' | 'INTEREST_CHANGE_SUMMARY_REPORT' | 'STATEMENT' | 'OUTSTANDING_REPORT', litigationId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<Account>>;
    public inquiryAccount(cifNo: string, accountDataType?: 'ACCOUNT_LIST' | 'ACCOUNT_OVERVIEW' | 'ACCOUNT_HISTORY' | 'INTEREST_CHANGE_SUMMARY_REPORT' | 'STATEMENT' | 'OUTSTANDING_REPORT', litigationId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<Account>>>;
    public inquiryAccount(cifNo: string, accountDataType?: 'ACCOUNT_LIST' | 'ACCOUNT_OVERVIEW' | 'ACCOUNT_HISTORY' | 'INTEREST_CHANGE_SUMMARY_REPORT' | 'STATEMENT' | 'OUTSTANDING_REPORT', litigationId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<Account>>>;
    public inquiryAccount(cifNo: string, accountDataType?: 'ACCOUNT_LIST' | 'ACCOUNT_OVERVIEW' | 'ACCOUNT_HISTORY' | 'INTEREST_CHANGE_SUMMARY_REPORT' | 'STATEMENT' | 'OUTSTANDING_REPORT', litigationId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (cifNo === null || cifNo === undefined) {
            throw new Error('Required parameter cifNo was null or undefined when calling inquiryAccount.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (accountDataType !== undefined && accountDataType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountDataType, 'accountDataType');
        }
        if (litigationId !== undefined && litigationId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationId, 'litigationId');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/profile-direct/${this.configuration.encodeParam({name: "cifNo", value: cifNo, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/inquiry-account`;
        return this.httpClient.request<Array<Account>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * inquiryBatchData
     * @param cifNo cifNo
     * @param litigationId litigationId
     * @param page page
     * @param size size
     * @param type type
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public inquiryBatchData(cifNo: string, litigationId?: string, page?: number, size?: number, type?: 'ACCOUNT_LIST' | 'ACCOUNT_OVERVIEW' | 'ACCOUNT_HISTORY' | 'INTEREST_CHANGE_SUMMARY_REPORT' | 'STATEMENT' | 'OUTSTANDING_REPORT', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PageOfBatchDataDto>;
    public inquiryBatchData(cifNo: string, litigationId?: string, page?: number, size?: number, type?: 'ACCOUNT_LIST' | 'ACCOUNT_OVERVIEW' | 'ACCOUNT_HISTORY' | 'INTEREST_CHANGE_SUMMARY_REPORT' | 'STATEMENT' | 'OUTSTANDING_REPORT', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PageOfBatchDataDto>>;
    public inquiryBatchData(cifNo: string, litigationId?: string, page?: number, size?: number, type?: 'ACCOUNT_LIST' | 'ACCOUNT_OVERVIEW' | 'ACCOUNT_HISTORY' | 'INTEREST_CHANGE_SUMMARY_REPORT' | 'STATEMENT' | 'OUTSTANDING_REPORT', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PageOfBatchDataDto>>;
    public inquiryBatchData(cifNo: string, litigationId?: string, page?: number, size?: number, type?: 'ACCOUNT_LIST' | 'ACCOUNT_OVERVIEW' | 'ACCOUNT_HISTORY' | 'INTEREST_CHANGE_SUMMARY_REPORT' | 'STATEMENT' | 'OUTSTANDING_REPORT', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (cifNo === null || cifNo === undefined) {
            throw new Error('Required parameter cifNo was null or undefined when calling inquiryBatchData.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (litigationId !== undefined && litigationId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationId, 'litigationId');
        }
        if (page !== undefined && page !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>page, 'page');
        }
        if (size !== undefined && size !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>size, 'size');
        }
        if (type !== undefined && type !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>type, 'type');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/profile-direct/${this.configuration.encodeParam({name: "cifNo", value: cifNo, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/inquiry-batch-data`;
        return this.httpClient.request<PageOfBatchDataDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * inquiryProfileDirect
     * Enhance api accountNo is meaning accountId
     * @param accountDataType accountDataType
     * @param cifNo cifNo
     * @param accountNo accountNo
     * @param litigationId litigationId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public inquiryProfileDirect(accountDataType: 'ACCOUNT_LIST' | 'ACCOUNT_OVERVIEW' | 'ACCOUNT_HISTORY' | 'INTEREST_CHANGE_SUMMARY_REPORT' | 'STATEMENT' | 'OUTSTANDING_REPORT', cifNo: string, accountNo?: string, litigationId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ProfileDirectResponse>;
    public inquiryProfileDirect(accountDataType: 'ACCOUNT_LIST' | 'ACCOUNT_OVERVIEW' | 'ACCOUNT_HISTORY' | 'INTEREST_CHANGE_SUMMARY_REPORT' | 'STATEMENT' | 'OUTSTANDING_REPORT', cifNo: string, accountNo?: string, litigationId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ProfileDirectResponse>>;
    public inquiryProfileDirect(accountDataType: 'ACCOUNT_LIST' | 'ACCOUNT_OVERVIEW' | 'ACCOUNT_HISTORY' | 'INTEREST_CHANGE_SUMMARY_REPORT' | 'STATEMENT' | 'OUTSTANDING_REPORT', cifNo: string, accountNo?: string, litigationId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ProfileDirectResponse>>;
    public inquiryProfileDirect(accountDataType: 'ACCOUNT_LIST' | 'ACCOUNT_OVERVIEW' | 'ACCOUNT_HISTORY' | 'INTEREST_CHANGE_SUMMARY_REPORT' | 'STATEMENT' | 'OUTSTANDING_REPORT', cifNo: string, accountNo?: string, litigationId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (accountDataType === null || accountDataType === undefined) {
            throw new Error('Required parameter accountDataType was null or undefined when calling inquiryProfileDirect.');
        }
        if (cifNo === null || cifNo === undefined) {
            throw new Error('Required parameter cifNo was null or undefined when calling inquiryProfileDirect.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (accountDataType !== undefined && accountDataType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountDataType, 'accountDataType');
        }
        if (accountNo !== undefined && accountNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountNo, 'accountNo');
        }
        if (litigationId !== undefined && litigationId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationId, 'litigationId');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/profile-direct/${this.configuration.encodeParam({name: "cifNo", value: cifNo, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/inquiry-profile-direct`;
        return this.httpClient.request<ProfileDirectResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveBatchData
     * Enhance api accountNo is meaning accountId
     * @param batchDataRequest batchDataRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveBatchData(batchDataRequest: BatchDataRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<BatchDataDto>;
    public saveBatchData(batchDataRequest: BatchDataRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<BatchDataDto>>;
    public saveBatchData(batchDataRequest: BatchDataRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<BatchDataDto>>;
    public saveBatchData(batchDataRequest: BatchDataRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (batchDataRequest === null || batchDataRequest === undefined) {
            throw new Error('Required parameter batchDataRequest was null or undefined when calling saveBatchData.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/profile-direct/save-batch-data`;
        return this.httpClient.request<BatchDataDto>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: batchDataRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * validateSaveBatchData
     * Enhance api accountNo is meaning accountId
     * @param batchDataRequest batchDataRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public validateSaveBatchData(batchDataRequest: BatchDataRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<CommonResponse>;
    public validateSaveBatchData(batchDataRequest: BatchDataRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CommonResponse>>;
    public validateSaveBatchData(batchDataRequest: BatchDataRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CommonResponse>>;
    public validateSaveBatchData(batchDataRequest: BatchDataRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (batchDataRequest === null || batchDataRequest === undefined) {
            throw new Error('Required parameter batchDataRequest was null or undefined when calling validateSaveBatchData.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/profile-direct/validate-save-batch-data`;
        return this.httpClient.request<CommonResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: batchDataRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
