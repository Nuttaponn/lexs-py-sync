/**
 * KTB Backend for Frontend APIs.
 *
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { DocumentMetadata } from '../model/documentMetadata';
// @ts-ignore
import { DocumentSearchResponse } from '../model/documentSearchResponse';
// @ts-ignore
import { DocumentUploadResponse } from '../model/documentUploadResponse';
// @ts-ignore
import { ErrorsList } from '../model/errorsList';
// @ts-ignore
import { UploadTrackingRequest } from '../model/uploadTrackingRequest';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class DocumentControllerService {

    protected basePath = 'https://lexsdev.krungthai/ktb/rest/lexs';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * getDocument
     * @param imageId imageId
     * @param imageSource imageSource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDocument(imageId: string, imageSource: 'LEXS' | 'IMP' | 'DIMS' | 'LG' | 'PN' | 'FCS' | 'TFS' | 'LCS' | 'RLS', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<string>;
    public getDocument(imageId: string, imageSource: 'LEXS' | 'IMP' | 'DIMS' | 'LG' | 'PN' | 'FCS' | 'TFS' | 'LCS' | 'RLS', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<string>>;
    public getDocument(imageId: string, imageSource: 'LEXS' | 'IMP' | 'DIMS' | 'LG' | 'PN' | 'FCS' | 'TFS' | 'LCS' | 'RLS', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<string>>;
    public getDocument(imageId: string, imageSource: 'LEXS' | 'IMP' | 'DIMS' | 'LG' | 'PN' | 'FCS' | 'TFS' | 'LCS' | 'RLS', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (imageId === null || imageId === undefined) {
            throw new Error('Required parameter imageId was null or undefined when calling getDocument.');
        }
        if (imageSource === null || imageSource === undefined) {
            throw new Error('Required parameter imageSource was null or undefined when calling getDocument.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                '*/*'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/document/view/${this.configuration.encodeParam({name: "imageSource", value: imageSource, in: "path", style: "simple", explode: false, dataType: "'LEXS' | 'IMP' | 'DIMS' | 'LG' | 'PN' | 'FCS' | 'TFS' | 'LCS' | 'RLS'", dataFormat: undefined})}/${this.configuration.encodeParam({name: "imageId", value: imageId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<string>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getMetadata
     * @param uploadSessionId uploadSessionId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMetadata(uploadSessionId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<DocumentMetadata>;
    public getMetadata(uploadSessionId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<DocumentMetadata>>;
    public getMetadata(uploadSessionId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<DocumentMetadata>>;
    public getMetadata(uploadSessionId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (uploadSessionId === null || uploadSessionId === undefined) {
            throw new Error('Required parameter uploadSessionId was null or undefined when calling getMetadata.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/document/metadata/${this.configuration.encodeParam({name: "uploadSessionId", value: uploadSessionId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<DocumentMetadata>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * searchDocuments
     * @param customerId customerId
     * @param documentTemplateId documentTemplateId
     * @param objectId objectId
     * @param objectType objectType
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchDocuments(customerId: string, documentTemplateId: string, objectId?: string, objectType?: 'PERSON' | 'CONTRACT' | 'COLLATERAL' | 'BILL_NO' | 'ACCOUNT_NO' | 'LINKAGE' | 'SUNDRY' | 'SUB_ACCOUNT' | 'DEFERMENT' | 'CESSATION' | 'APPEAL' | 'SUPREME' | 'DISPUTE_APPEAL' | 'DISPUTE_SUPREME' | 'EXPENSE' | 'CONDITION_APPEAL' | 'CONDITION_SUPREME' | 'SEIZURE_LED' | 'WITHDRAW_SEIZURE_LED' | 'DEFERMENT_EXEC' | 'AUCTION_EXPENSE' | 'AUCTION' | 'EXTERNAL_PAYMENT_TRACKING_DEED_GROUP' | 'CASHIER_CHEQUE' | 'CHEQUE_ADDITIONAL_PAYMENT' | 'CASHIER_CHEQUE_TRANSFER_OWNERSHIP' | 'DEED_GROUP_ID' | 'CONV_DOC_UPLOAD_ID' | 'CONVY_ACC_DOC_FOLLOWUP_ID' | 'AUC_BIDDING_ID' | 'AUC_BIDDING_DEED_GROUP_ID' | 'WITHDRAW_SEIZURES_COLLATERALS_CONSENT_DOCUMENT' | 'DEBT_SETTLEMENT_DOCUMENT' | 'ACCOUNT' | 'ASSET' | 'ASSET_INVESTIGATION' | 'AUCTION_CASHIER_CHEQUE_TRANSFER_OWNERSHIP' | 'DEBT_SETTLEMENT_ACCOUNT', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<DocumentSearchResponse>>;
    public searchDocuments(customerId: string, documentTemplateId: string, objectId?: string, objectType?: 'PERSON' | 'CONTRACT' | 'COLLATERAL' | 'BILL_NO' | 'ACCOUNT_NO' | 'LINKAGE' | 'SUNDRY' | 'SUB_ACCOUNT' | 'DEFERMENT' | 'CESSATION' | 'APPEAL' | 'SUPREME' | 'DISPUTE_APPEAL' | 'DISPUTE_SUPREME' | 'EXPENSE' | 'CONDITION_APPEAL' | 'CONDITION_SUPREME' | 'SEIZURE_LED' | 'WITHDRAW_SEIZURE_LED' | 'DEFERMENT_EXEC' | 'AUCTION_EXPENSE' | 'AUCTION' | 'EXTERNAL_PAYMENT_TRACKING_DEED_GROUP' | 'CASHIER_CHEQUE' | 'CHEQUE_ADDITIONAL_PAYMENT' | 'CASHIER_CHEQUE_TRANSFER_OWNERSHIP' | 'DEED_GROUP_ID' | 'CONV_DOC_UPLOAD_ID' | 'CONVY_ACC_DOC_FOLLOWUP_ID' | 'AUC_BIDDING_ID' | 'AUC_BIDDING_DEED_GROUP_ID' | 'WITHDRAW_SEIZURES_COLLATERALS_CONSENT_DOCUMENT' | 'DEBT_SETTLEMENT_DOCUMENT' | 'ACCOUNT' | 'ASSET' | 'ASSET_INVESTIGATION' | 'AUCTION_CASHIER_CHEQUE_TRANSFER_OWNERSHIP' | 'DEBT_SETTLEMENT_ACCOUNT', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<DocumentSearchResponse>>>;
    public searchDocuments(customerId: string, documentTemplateId: string, objectId?: string, objectType?: 'PERSON' | 'CONTRACT' | 'COLLATERAL' | 'BILL_NO' | 'ACCOUNT_NO' | 'LINKAGE' | 'SUNDRY' | 'SUB_ACCOUNT' | 'DEFERMENT' | 'CESSATION' | 'APPEAL' | 'SUPREME' | 'DISPUTE_APPEAL' | 'DISPUTE_SUPREME' | 'EXPENSE' | 'CONDITION_APPEAL' | 'CONDITION_SUPREME' | 'SEIZURE_LED' | 'WITHDRAW_SEIZURE_LED' | 'DEFERMENT_EXEC' | 'AUCTION_EXPENSE' | 'AUCTION' | 'EXTERNAL_PAYMENT_TRACKING_DEED_GROUP' | 'CASHIER_CHEQUE' | 'CHEQUE_ADDITIONAL_PAYMENT' | 'CASHIER_CHEQUE_TRANSFER_OWNERSHIP' | 'DEED_GROUP_ID' | 'CONV_DOC_UPLOAD_ID' | 'CONVY_ACC_DOC_FOLLOWUP_ID' | 'AUC_BIDDING_ID' | 'AUC_BIDDING_DEED_GROUP_ID' | 'WITHDRAW_SEIZURES_COLLATERALS_CONSENT_DOCUMENT' | 'DEBT_SETTLEMENT_DOCUMENT' | 'ACCOUNT' | 'ASSET' | 'ASSET_INVESTIGATION' | 'AUCTION_CASHIER_CHEQUE_TRANSFER_OWNERSHIP' | 'DEBT_SETTLEMENT_ACCOUNT', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<DocumentSearchResponse>>>;
    public searchDocuments(customerId: string, documentTemplateId: string, objectId?: string, objectType?: 'PERSON' | 'CONTRACT' | 'COLLATERAL' | 'BILL_NO' | 'ACCOUNT_NO' | 'LINKAGE' | 'SUNDRY' | 'SUB_ACCOUNT' | 'DEFERMENT' | 'CESSATION' | 'APPEAL' | 'SUPREME' | 'DISPUTE_APPEAL' | 'DISPUTE_SUPREME' | 'EXPENSE' | 'CONDITION_APPEAL' | 'CONDITION_SUPREME' | 'SEIZURE_LED' | 'WITHDRAW_SEIZURE_LED' | 'DEFERMENT_EXEC' | 'AUCTION_EXPENSE' | 'AUCTION' | 'EXTERNAL_PAYMENT_TRACKING_DEED_GROUP' | 'CASHIER_CHEQUE' | 'CHEQUE_ADDITIONAL_PAYMENT' | 'CASHIER_CHEQUE_TRANSFER_OWNERSHIP' | 'DEED_GROUP_ID' | 'CONV_DOC_UPLOAD_ID' | 'CONVY_ACC_DOC_FOLLOWUP_ID' | 'AUC_BIDDING_ID' | 'AUC_BIDDING_DEED_GROUP_ID' | 'WITHDRAW_SEIZURES_COLLATERALS_CONSENT_DOCUMENT' | 'DEBT_SETTLEMENT_DOCUMENT' | 'ACCOUNT' | 'ASSET' | 'ASSET_INVESTIGATION' | 'AUCTION_CASHIER_CHEQUE_TRANSFER_OWNERSHIP' | 'DEBT_SETTLEMENT_ACCOUNT', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling searchDocuments.');
        }
        if (documentTemplateId === null || documentTemplateId === undefined) {
            throw new Error('Required parameter documentTemplateId was null or undefined when calling searchDocuments.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (customerId !== undefined && customerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerId, 'customerId');
        }
        if (objectId !== undefined && objectId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>objectId, 'objectId');
        }
        if (objectType !== undefined && objectType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>objectType, 'objectType');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/document/search/${this.configuration.encodeParam({name: "documentTemplateId", value: documentTemplateId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<Array<DocumentSearchResponse>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * uploadBasicDocument
     * @param documentTemplateId documentTemplateId
     * @param file file
     * @param objectId objectId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadBasicDocument(documentTemplateId: string, file: Blob, objectId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<DocumentUploadResponse>;
    public uploadBasicDocument(documentTemplateId: string, file: Blob, objectId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<DocumentUploadResponse>>;
    public uploadBasicDocument(documentTemplateId: string, file: Blob, objectId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<DocumentUploadResponse>>;
    public uploadBasicDocument(documentTemplateId: string, file: Blob, objectId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (documentTemplateId === null || documentTemplateId === undefined) {
            throw new Error('Required parameter documentTemplateId was null or undefined when calling uploadBasicDocument.');
        }
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling uploadBasicDocument.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (objectId !== undefined && objectId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>objectId, 'objectId');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (file !== undefined) {
            localVarFormParams = localVarFormParams.append('file', <any>file) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/document/upload/${this.configuration.encodeParam({name: "documentTemplateId", value: documentTemplateId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/basic`;
        return this.httpClient.request<DocumentUploadResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * uploadDocument
     * @param cif cif
     * @param documentTemplateId documentTemplateId
     * @param file file
     * @param litigationId litigationId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadDocument(cif: string, documentTemplateId: string, file: Blob, litigationId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<DocumentUploadResponse>;
    public uploadDocument(cif: string, documentTemplateId: string, file: Blob, litigationId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<DocumentUploadResponse>>;
    public uploadDocument(cif: string, documentTemplateId: string, file: Blob, litigationId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<DocumentUploadResponse>>;
    public uploadDocument(cif: string, documentTemplateId: string, file: Blob, litigationId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (cif === null || cif === undefined) {
            throw new Error('Required parameter cif was null or undefined when calling uploadDocument.');
        }
        if (documentTemplateId === null || documentTemplateId === undefined) {
            throw new Error('Required parameter documentTemplateId was null or undefined when calling uploadDocument.');
        }
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling uploadDocument.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (cif !== undefined && cif !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cif, 'cif');
        }
        if (litigationId !== undefined && litigationId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationId, 'litigationId');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (file !== undefined) {
            localVarFormParams = localVarFormParams.append('file', <any>file) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/document/upload/${this.configuration.encodeParam({name: "documentTemplateId", value: documentTemplateId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<DocumentUploadResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
