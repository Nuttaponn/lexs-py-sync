/**
 * KTB Backend for Frontend APIs.
 *
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { CustomerDetailDto } from '../model/customerDetailDto';
// @ts-ignore
import { CustomerSearchConditionRequest } from '../model/customerSearchConditionRequest';
// @ts-ignore
import { DocumentDto } from '../model/documentDto';
// @ts-ignore
import { DocumentInfoRequest } from '../model/documentInfoRequest';
// @ts-ignore
import { PageOfCustomerAuditLogDto } from '../model/pageOfCustomerAuditLogDto';
// @ts-ignore
import { PageOfCustomerDocumentDto } from '../model/pageOfCustomerDocumentDto';
// @ts-ignore
import { PageOfCustomerDto } from '../model/pageOfCustomerDto';
// @ts-ignore
import { PageOfDocumentAuditLogDto } from '../model/pageOfDocumentAuditLogDto';
// @ts-ignore
import { Person } from '../model/person';
// @ts-ignore
import { PersonAddressRequest } from '../model/personAddressRequest';
// @ts-ignore
import { PersonDto } from '../model/personDto';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class CustomerControllerService {

    protected basePath = 'https://lexsdev.krungthai/ktb/rest/lexs';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * @param customerId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCustomer(customerId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<CustomerDetailDto>;
    public getCustomer(customerId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CustomerDetailDto>>;
    public getCustomer(customerId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CustomerDetailDto>>;
    public getCustomer(customerId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling getCustomer.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/customer/${this.configuration.encodeParam({name: "customerId", value: customerId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<CustomerDetailDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCustomerDocumentDashboard
     * @param searchMode 
     * @param tab 
     * @param accountNo 
     * @param amdUnit 
     * @param billNo 
     * @param blackCaseId 
     * @param caseCreator 
     * @param caseStatus 
     * @param citizenId 
     * @param court 
     * @param customerId 
     * @param customerName 
     * @param customerStatus 
     * @param customerSurname 
     * @param dashboard 
     * @param debtTransferTo 
     * @param debtor 
     * @param kbdId 
     * @param litigationCloseStatus 
     * @param litigationId 
     * @param loanType 
     * @param orgCode 
     * @param ownerId 
     * @param page page
     * @param redCaseId 
     * @param responseUnit 
     * @param roomNo 
     * @param samFlag 
     * @param searchScope 
     * @param searchString 
     * @param size size
     * @param sortBy sortBy
     * @param sortOrder sortOrder
     * @param tamcFlag 
     * @param writeOffStatus 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCustomerDocumentDashboard(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: 'DEFAULT_PAYMENT' | 'NOTICE_LETTER_PROCESS' | 'LITIGATION_PROCESS' | 'DEFERMENT' | 'CESSATION' | 'NORMAL', customerSurname?: string, dashboard?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PageOfCustomerDocumentDto>;
    public getCustomerDocumentDashboard(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: 'DEFAULT_PAYMENT' | 'NOTICE_LETTER_PROCESS' | 'LITIGATION_PROCESS' | 'DEFERMENT' | 'CESSATION' | 'NORMAL', customerSurname?: string, dashboard?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PageOfCustomerDocumentDto>>;
    public getCustomerDocumentDashboard(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: 'DEFAULT_PAYMENT' | 'NOTICE_LETTER_PROCESS' | 'LITIGATION_PROCESS' | 'DEFERMENT' | 'CESSATION' | 'NORMAL', customerSurname?: string, dashboard?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PageOfCustomerDocumentDto>>;
    public getCustomerDocumentDashboard(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: 'DEFAULT_PAYMENT' | 'NOTICE_LETTER_PROCESS' | 'LITIGATION_PROCESS' | 'DEFERMENT' | 'CESSATION' | 'NORMAL', customerSurname?: string, dashboard?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (searchMode === null || searchMode === undefined) {
            throw new Error('Required parameter searchMode was null or undefined when calling getCustomerDocumentDashboard.');
        }
        if (tab === null || tab === undefined) {
            throw new Error('Required parameter tab was null or undefined when calling getCustomerDocumentDashboard.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (accountNo !== undefined && accountNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountNo, 'accountNo');
        }
        if (amdUnit !== undefined && amdUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>amdUnit, 'amdUnit');
        }
        if (billNo !== undefined && billNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>billNo, 'billNo');
        }
        if (blackCaseId !== undefined && blackCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blackCaseId, 'blackCaseId');
        }
        if (caseCreator !== undefined && caseCreator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseCreator, 'caseCreator');
        }
        if (caseStatus !== undefined && caseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseStatus, 'caseStatus');
        }
        if (citizenId !== undefined && citizenId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>citizenId, 'citizenId');
        }
        if (court !== undefined && court !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>court, 'court');
        }
        if (customerId !== undefined && customerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerId, 'customerId');
        }
        if (customerName !== undefined && customerName !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerName, 'customerName');
        }
        if (customerStatus !== undefined && customerStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerStatus, 'customerStatus');
        }
        if (customerSurname !== undefined && customerSurname !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerSurname, 'customerSurname');
        }
        if (dashboard !== undefined && dashboard !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dashboard, 'dashboard');
        }
        if (debtTransferTo) {
            debtTransferTo.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'debtTransferTo');
            })
        }
        if (debtor !== undefined && debtor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>debtor, 'debtor');
        }
        if (kbdId !== undefined && kbdId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>kbdId, 'kbdId');
        }
        if (litigationCloseStatus !== undefined && litigationCloseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationCloseStatus, 'litigationCloseStatus');
        }
        if (litigationId !== undefined && litigationId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationId, 'litigationId');
        }
        if (loanType) {
            loanType.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'loanType');
            })
        }
        if (orgCode !== undefined && orgCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>orgCode, 'orgCode');
        }
        if (ownerId !== undefined && ownerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ownerId, 'ownerId');
        }
        if (page !== undefined && page !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>page, 'page');
        }
        if (redCaseId !== undefined && redCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>redCaseId, 'redCaseId');
        }
        if (responseUnit !== undefined && responseUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>responseUnit, 'responseUnit');
        }
        if (roomNo !== undefined && roomNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>roomNo, 'roomNo');
        }
        if (samFlag !== undefined && samFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>samFlag, 'samFlag');
        }
        if (searchMode !== undefined && searchMode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchMode, 'searchMode');
        }
        if (searchScope !== undefined && searchScope !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchScope, 'searchScope');
        }
        if (searchString !== undefined && searchString !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchString, 'searchString');
        }
        if (size !== undefined && size !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>size, 'size');
        }
        if (sortBy) {
            sortBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sortBy');
            })
        }
        if (sortOrder !== undefined && sortOrder !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortOrder, 'sortOrder');
        }
        if (tab !== undefined && tab !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tab, 'tab');
        }
        if (tamcFlag !== undefined && tamcFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tamcFlag, 'tamcFlag');
        }
        if (writeOffStatus !== undefined && writeOffStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>writeOffStatus, 'writeOffStatus');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/customer/workbench/customer-document`;
        return this.httpClient.request<PageOfCustomerDocumentDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCustomerDocumentDashboardDownload
     * @param searchMode 
     * @param tab 
     * @param accountNo 
     * @param amdUnit 
     * @param billNo 
     * @param blackCaseId 
     * @param caseCreator 
     * @param caseStatus 
     * @param citizenId 
     * @param court 
     * @param customerId 
     * @param customerName 
     * @param customerStatus 
     * @param customerSurname 
     * @param dashboard 
     * @param debtTransferTo 
     * @param debtor 
     * @param kbdId 
     * @param litigationCloseStatus 
     * @param litigationId 
     * @param loanType 
     * @param orgCode 
     * @param ownerId 
     * @param page page
     * @param redCaseId 
     * @param responseUnit 
     * @param roomNo 
     * @param samFlag 
     * @param searchScope 
     * @param searchString 
     * @param size size
     * @param sortBy sortBy
     * @param sortOrder sortOrder
     * @param tamcFlag 
     * @param writeOffStatus 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCustomerDocumentDashboardDownload(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: 'DEFAULT_PAYMENT' | 'NOTICE_LETTER_PROCESS' | 'LITIGATION_PROCESS' | 'DEFERMENT' | 'CESSATION' | 'NORMAL', customerSurname?: string, dashboard?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<PageOfCustomerDocumentDto>;
    public getCustomerDocumentDashboardDownload(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: 'DEFAULT_PAYMENT' | 'NOTICE_LETTER_PROCESS' | 'LITIGATION_PROCESS' | 'DEFERMENT' | 'CESSATION' | 'NORMAL', customerSurname?: string, dashboard?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PageOfCustomerDocumentDto>>;
    public getCustomerDocumentDashboardDownload(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: 'DEFAULT_PAYMENT' | 'NOTICE_LETTER_PROCESS' | 'LITIGATION_PROCESS' | 'DEFERMENT' | 'CESSATION' | 'NORMAL', customerSurname?: string, dashboard?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PageOfCustomerDocumentDto>>;
    public getCustomerDocumentDashboardDownload(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: 'DEFAULT_PAYMENT' | 'NOTICE_LETTER_PROCESS' | 'LITIGATION_PROCESS' | 'DEFERMENT' | 'CESSATION' | 'NORMAL', customerSurname?: string, dashboard?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (searchMode === null || searchMode === undefined) {
            throw new Error('Required parameter searchMode was null or undefined when calling getCustomerDocumentDashboardDownload.');
        }
        if (tab === null || tab === undefined) {
            throw new Error('Required parameter tab was null or undefined when calling getCustomerDocumentDashboardDownload.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (accountNo !== undefined && accountNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountNo, 'accountNo');
        }
        if (amdUnit !== undefined && amdUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>amdUnit, 'amdUnit');
        }
        if (billNo !== undefined && billNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>billNo, 'billNo');
        }
        if (blackCaseId !== undefined && blackCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blackCaseId, 'blackCaseId');
        }
        if (caseCreator !== undefined && caseCreator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseCreator, 'caseCreator');
        }
        if (caseStatus !== undefined && caseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseStatus, 'caseStatus');
        }
        if (citizenId !== undefined && citizenId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>citizenId, 'citizenId');
        }
        if (court !== undefined && court !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>court, 'court');
        }
        if (customerId !== undefined && customerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerId, 'customerId');
        }
        if (customerName !== undefined && customerName !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerName, 'customerName');
        }
        if (customerStatus !== undefined && customerStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerStatus, 'customerStatus');
        }
        if (customerSurname !== undefined && customerSurname !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerSurname, 'customerSurname');
        }
        if (dashboard !== undefined && dashboard !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dashboard, 'dashboard');
        }
        if (debtTransferTo) {
            debtTransferTo.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'debtTransferTo');
            })
        }
        if (debtor !== undefined && debtor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>debtor, 'debtor');
        }
        if (kbdId !== undefined && kbdId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>kbdId, 'kbdId');
        }
        if (litigationCloseStatus !== undefined && litigationCloseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationCloseStatus, 'litigationCloseStatus');
        }
        if (litigationId !== undefined && litigationId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationId, 'litigationId');
        }
        if (loanType) {
            loanType.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'loanType');
            })
        }
        if (orgCode !== undefined && orgCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>orgCode, 'orgCode');
        }
        if (ownerId !== undefined && ownerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ownerId, 'ownerId');
        }
        if (page !== undefined && page !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>page, 'page');
        }
        if (redCaseId !== undefined && redCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>redCaseId, 'redCaseId');
        }
        if (responseUnit !== undefined && responseUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>responseUnit, 'responseUnit');
        }
        if (roomNo !== undefined && roomNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>roomNo, 'roomNo');
        }
        if (samFlag !== undefined && samFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>samFlag, 'samFlag');
        }
        if (searchMode !== undefined && searchMode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchMode, 'searchMode');
        }
        if (searchScope !== undefined && searchScope !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchScope, 'searchScope');
        }
        if (searchString !== undefined && searchString !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchString, 'searchString');
        }
        if (size !== undefined && size !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>size, 'size');
        }
        if (sortBy) {
            sortBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sortBy');
            })
        }
        if (sortOrder !== undefined && sortOrder !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortOrder, 'sortOrder');
        }
        if (tab !== undefined && tab !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tab, 'tab');
        }
        if (tamcFlag !== undefined && tamcFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tamcFlag, 'tamcFlag');
        }
        if (writeOffStatus !== undefined && writeOffStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>writeOffStatus, 'writeOffStatus');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/customer/workbench/customer-document/excel`;
        return this.httpClient.request<PageOfCustomerDocumentDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * inquireCustomerAuditLog
     * @param customerId customerId
     * @param action action
     * @param page page
     * @param size size
     * @param target target
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public inquireCustomerAuditLog(customerId: string, action?: string, page?: number, size?: number, target?: string, userId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PageOfCustomerAuditLogDto>;
    public inquireCustomerAuditLog(customerId: string, action?: string, page?: number, size?: number, target?: string, userId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PageOfCustomerAuditLogDto>>;
    public inquireCustomerAuditLog(customerId: string, action?: string, page?: number, size?: number, target?: string, userId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PageOfCustomerAuditLogDto>>;
    public inquireCustomerAuditLog(customerId: string, action?: string, page?: number, size?: number, target?: string, userId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling inquireCustomerAuditLog.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (action !== undefined && action !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>action, 'action');
        }
        if (page !== undefined && page !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>page, 'page');
        }
        if (size !== undefined && size !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>size, 'size');
        }
        if (target !== undefined && target !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>target, 'target');
        }
        if (userId !== undefined && userId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>userId, 'userId');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/customer/${this.configuration.encodeParam({name: "customerId", value: customerId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/audit-log`;
        return this.httpClient.request<PageOfCustomerAuditLogDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * inquiryCustomers
     * @param searchMode 
     * @param tab 
     * @param accountNo 
     * @param amdUnit 
     * @param billNo 
     * @param blackCaseId 
     * @param caseCreator 
     * @param caseStatus 
     * @param citizenId 
     * @param court 
     * @param customerId 
     * @param customerName 
     * @param customerStatus 
     * @param customerSurname 
     * @param dashboard 
     * @param debtTransferTo 
     * @param debtor 
     * @param kbdId 
     * @param litigationCloseStatus 
     * @param litigationId 
     * @param loanType 
     * @param orgCode 
     * @param ownerId 
     * @param page page
     * @param redCaseId 
     * @param responseUnit 
     * @param roomNo 
     * @param samFlag 
     * @param searchScope 
     * @param searchString 
     * @param size size
     * @param sortBy sortBy
     * @param sortOrder sortOrder
     * @param tamcFlag 
     * @param writeOffStatus 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public inquiryCustomers(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: 'DEFAULT_PAYMENT' | 'NOTICE_LETTER_PROCESS' | 'LITIGATION_PROCESS' | 'DEFERMENT' | 'CESSATION' | 'NORMAL', customerSurname?: string, dashboard?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PageOfCustomerDto>;
    public inquiryCustomers(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: 'DEFAULT_PAYMENT' | 'NOTICE_LETTER_PROCESS' | 'LITIGATION_PROCESS' | 'DEFERMENT' | 'CESSATION' | 'NORMAL', customerSurname?: string, dashboard?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PageOfCustomerDto>>;
    public inquiryCustomers(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: 'DEFAULT_PAYMENT' | 'NOTICE_LETTER_PROCESS' | 'LITIGATION_PROCESS' | 'DEFERMENT' | 'CESSATION' | 'NORMAL', customerSurname?: string, dashboard?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PageOfCustomerDto>>;
    public inquiryCustomers(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: 'DEFAULT_PAYMENT' | 'NOTICE_LETTER_PROCESS' | 'LITIGATION_PROCESS' | 'DEFERMENT' | 'CESSATION' | 'NORMAL', customerSurname?: string, dashboard?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (searchMode === null || searchMode === undefined) {
            throw new Error('Required parameter searchMode was null or undefined when calling inquiryCustomers.');
        }
        if (tab === null || tab === undefined) {
            throw new Error('Required parameter tab was null or undefined when calling inquiryCustomers.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (accountNo !== undefined && accountNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountNo, 'accountNo');
        }
        if (amdUnit !== undefined && amdUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>amdUnit, 'amdUnit');
        }
        if (billNo !== undefined && billNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>billNo, 'billNo');
        }
        if (blackCaseId !== undefined && blackCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blackCaseId, 'blackCaseId');
        }
        if (caseCreator !== undefined && caseCreator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseCreator, 'caseCreator');
        }
        if (caseStatus !== undefined && caseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseStatus, 'caseStatus');
        }
        if (citizenId !== undefined && citizenId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>citizenId, 'citizenId');
        }
        if (court !== undefined && court !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>court, 'court');
        }
        if (customerId !== undefined && customerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerId, 'customerId');
        }
        if (customerName !== undefined && customerName !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerName, 'customerName');
        }
        if (customerStatus !== undefined && customerStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerStatus, 'customerStatus');
        }
        if (customerSurname !== undefined && customerSurname !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerSurname, 'customerSurname');
        }
        if (dashboard !== undefined && dashboard !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dashboard, 'dashboard');
        }
        if (debtTransferTo) {
            debtTransferTo.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'debtTransferTo');
            })
        }
        if (debtor !== undefined && debtor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>debtor, 'debtor');
        }
        if (kbdId !== undefined && kbdId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>kbdId, 'kbdId');
        }
        if (litigationCloseStatus !== undefined && litigationCloseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationCloseStatus, 'litigationCloseStatus');
        }
        if (litigationId !== undefined && litigationId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationId, 'litigationId');
        }
        if (loanType) {
            loanType.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'loanType');
            })
        }
        if (orgCode !== undefined && orgCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>orgCode, 'orgCode');
        }
        if (ownerId !== undefined && ownerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ownerId, 'ownerId');
        }
        if (page !== undefined && page !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>page, 'page');
        }
        if (redCaseId !== undefined && redCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>redCaseId, 'redCaseId');
        }
        if (responseUnit !== undefined && responseUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>responseUnit, 'responseUnit');
        }
        if (roomNo !== undefined && roomNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>roomNo, 'roomNo');
        }
        if (samFlag !== undefined && samFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>samFlag, 'samFlag');
        }
        if (searchMode !== undefined && searchMode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchMode, 'searchMode');
        }
        if (searchScope !== undefined && searchScope !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchScope, 'searchScope');
        }
        if (searchString !== undefined && searchString !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchString, 'searchString');
        }
        if (size !== undefined && size !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>size, 'size');
        }
        if (sortBy) {
            sortBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sortBy');
            })
        }
        if (sortOrder !== undefined && sortOrder !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortOrder, 'sortOrder');
        }
        if (tab !== undefined && tab !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tab, 'tab');
        }
        if (tamcFlag !== undefined && tamcFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tamcFlag, 'tamcFlag');
        }
        if (writeOffStatus !== undefined && writeOffStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>writeOffStatus, 'writeOffStatus');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/customer`;
        return this.httpClient.request<PageOfCustomerDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * inquiryCustomersDownload
     * @param searchMode 
     * @param tab 
     * @param accountNo 
     * @param amdUnit 
     * @param billNo 
     * @param blackCaseId 
     * @param caseCreator 
     * @param caseStatus 
     * @param citizenId 
     * @param court 
     * @param customerId 
     * @param customerName 
     * @param customerStatus 
     * @param customerSurname 
     * @param dashboard 
     * @param debtTransferTo 
     * @param debtor 
     * @param kbdId 
     * @param litigationCloseStatus 
     * @param litigationId 
     * @param loanType 
     * @param orgCode 
     * @param ownerId 
     * @param page page
     * @param redCaseId 
     * @param responseUnit 
     * @param roomNo 
     * @param samFlag 
     * @param searchScope 
     * @param searchString 
     * @param size size
     * @param sortBy sortBy
     * @param sortOrder sortOrder
     * @param tamcFlag 
     * @param writeOffStatus 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public inquiryCustomersDownload(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: 'DEFAULT_PAYMENT' | 'NOTICE_LETTER_PROCESS' | 'LITIGATION_PROCESS' | 'DEFERMENT' | 'CESSATION' | 'NORMAL', customerSurname?: string, dashboard?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<PageOfCustomerDto>;
    public inquiryCustomersDownload(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: 'DEFAULT_PAYMENT' | 'NOTICE_LETTER_PROCESS' | 'LITIGATION_PROCESS' | 'DEFERMENT' | 'CESSATION' | 'NORMAL', customerSurname?: string, dashboard?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PageOfCustomerDto>>;
    public inquiryCustomersDownload(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: 'DEFAULT_PAYMENT' | 'NOTICE_LETTER_PROCESS' | 'LITIGATION_PROCESS' | 'DEFERMENT' | 'CESSATION' | 'NORMAL', customerSurname?: string, dashboard?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PageOfCustomerDto>>;
    public inquiryCustomersDownload(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: 'DEFAULT_PAYMENT' | 'NOTICE_LETTER_PROCESS' | 'LITIGATION_PROCESS' | 'DEFERMENT' | 'CESSATION' | 'NORMAL', customerSurname?: string, dashboard?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (searchMode === null || searchMode === undefined) {
            throw new Error('Required parameter searchMode was null or undefined when calling inquiryCustomersDownload.');
        }
        if (tab === null || tab === undefined) {
            throw new Error('Required parameter tab was null or undefined when calling inquiryCustomersDownload.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (accountNo !== undefined && accountNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountNo, 'accountNo');
        }
        if (amdUnit !== undefined && amdUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>amdUnit, 'amdUnit');
        }
        if (billNo !== undefined && billNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>billNo, 'billNo');
        }
        if (blackCaseId !== undefined && blackCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blackCaseId, 'blackCaseId');
        }
        if (caseCreator !== undefined && caseCreator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseCreator, 'caseCreator');
        }
        if (caseStatus !== undefined && caseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseStatus, 'caseStatus');
        }
        if (citizenId !== undefined && citizenId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>citizenId, 'citizenId');
        }
        if (court !== undefined && court !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>court, 'court');
        }
        if (customerId !== undefined && customerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerId, 'customerId');
        }
        if (customerName !== undefined && customerName !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerName, 'customerName');
        }
        if (customerStatus !== undefined && customerStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerStatus, 'customerStatus');
        }
        if (customerSurname !== undefined && customerSurname !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerSurname, 'customerSurname');
        }
        if (dashboard !== undefined && dashboard !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dashboard, 'dashboard');
        }
        if (debtTransferTo) {
            debtTransferTo.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'debtTransferTo');
            })
        }
        if (debtor !== undefined && debtor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>debtor, 'debtor');
        }
        if (kbdId !== undefined && kbdId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>kbdId, 'kbdId');
        }
        if (litigationCloseStatus !== undefined && litigationCloseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationCloseStatus, 'litigationCloseStatus');
        }
        if (litigationId !== undefined && litigationId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationId, 'litigationId');
        }
        if (loanType) {
            loanType.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'loanType');
            })
        }
        if (orgCode !== undefined && orgCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>orgCode, 'orgCode');
        }
        if (ownerId !== undefined && ownerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ownerId, 'ownerId');
        }
        if (page !== undefined && page !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>page, 'page');
        }
        if (redCaseId !== undefined && redCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>redCaseId, 'redCaseId');
        }
        if (responseUnit !== undefined && responseUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>responseUnit, 'responseUnit');
        }
        if (roomNo !== undefined && roomNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>roomNo, 'roomNo');
        }
        if (samFlag !== undefined && samFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>samFlag, 'samFlag');
        }
        if (searchMode !== undefined && searchMode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchMode, 'searchMode');
        }
        if (searchScope !== undefined && searchScope !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchScope, 'searchScope');
        }
        if (searchString !== undefined && searchString !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchString, 'searchString');
        }
        if (size !== undefined && size !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>size, 'size');
        }
        if (sortBy) {
            sortBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sortBy');
            })
        }
        if (sortOrder !== undefined && sortOrder !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortOrder, 'sortOrder');
        }
        if (tab !== undefined && tab !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tab, 'tab');
        }
        if (tamcFlag !== undefined && tamcFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tamcFlag, 'tamcFlag');
        }
        if (writeOffStatus !== undefined && writeOffStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>writeOffStatus, 'writeOffStatus');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/customer/excel`;
        return this.httpClient.request<PageOfCustomerDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * inquiryDocumentAuditLog
     * @param customerId customerId
     * @param documentTemplateId documentTemplateId
     * @param page page
     * @param size size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public inquiryDocumentAuditLog(customerId: string, documentTemplateId?: string, page?: number, size?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PageOfDocumentAuditLogDto>;
    public inquiryDocumentAuditLog(customerId: string, documentTemplateId?: string, page?: number, size?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PageOfDocumentAuditLogDto>>;
    public inquiryDocumentAuditLog(customerId: string, documentTemplateId?: string, page?: number, size?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PageOfDocumentAuditLogDto>>;
    public inquiryDocumentAuditLog(customerId: string, documentTemplateId?: string, page?: number, size?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling inquiryDocumentAuditLog.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (documentTemplateId !== undefined && documentTemplateId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>documentTemplateId, 'documentTemplateId');
        }
        if (page !== undefined && page !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>page, 'page');
        }
        if (size !== undefined && size !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>size, 'size');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/customer/${this.configuration.encodeParam({name: "customerId", value: customerId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/document-audit-log`;
        return this.httpClient.request<PageOfDocumentAuditLogDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * processOnRequest
     * @param customerId customerId
     * @param authenticated 
     * @param authorities0Authority 
     * @param credentials 
     * @param details 
     * @param principal 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public processOnRequest(customerId: string, authenticated?: boolean, authorities0Authority?: string, credentials?: object, details?: object, principal?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public processOnRequest(customerId: string, authenticated?: boolean, authorities0Authority?: string, credentials?: object, details?: object, principal?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public processOnRequest(customerId: string, authenticated?: boolean, authorities0Authority?: string, credentials?: object, details?: object, principal?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public processOnRequest(customerId: string, authenticated?: boolean, authorities0Authority?: string, credentials?: object, details?: object, principal?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling processOnRequest.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (authenticated !== undefined && authenticated !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>authenticated, 'authenticated');
        }
        if (authorities0Authority !== undefined && authorities0Authority !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>authorities0Authority, 'authorities[0].authority');
        }
        if (credentials !== undefined && credentials !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>credentials, 'credentials');
        }
        if (details !== undefined && details !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>details, 'details');
        }
        if (principal !== undefined && principal !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>principal, 'principal');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/customer/${this.configuration.encodeParam({name: "customerId", value: customerId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/on-request`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateAddress
     * @param customerId customerId
     * @param personAddress personAddress
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAddress(customerId: string, personAddress: PersonAddressRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PersonAddressRequest>;
    public updateAddress(customerId: string, personAddress: PersonAddressRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PersonAddressRequest>>;
    public updateAddress(customerId: string, personAddress: PersonAddressRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PersonAddressRequest>>;
    public updateAddress(customerId: string, personAddress: PersonAddressRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling updateAddress.');
        }
        if (personAddress === null || personAddress === undefined) {
            throw new Error('Required parameter personAddress was null or undefined when calling updateAddress.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/customer/${this.configuration.encodeParam({name: "customerId", value: customerId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/update-address`;
        return this.httpClient.request<PersonAddressRequest>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: personAddress,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateDeathStatus
     * @param customerId customerId
     * @param person person
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateDeathStatus(customerId: string, person: Person, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PersonDto>;
    public updateDeathStatus(customerId: string, person: Person, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PersonDto>>;
    public updateDeathStatus(customerId: string, person: Person, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PersonDto>>;
    public updateDeathStatus(customerId: string, person: Person, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling updateDeathStatus.');
        }
        if (person === null || person === undefined) {
            throw new Error('Required parameter person was null or undefined when calling updateDeathStatus.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/customer/${this.configuration.encodeParam({name: "customerId", value: customerId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/sync-status`;
        return this.httpClient.request<PersonDto>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: person,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateDocuments
     * @param customerId customerId
     * @param docInfoReq docInfoReq
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateDocuments(customerId: string, docInfoReq: DocumentInfoRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<DocumentDto>>;
    public updateDocuments(customerId: string, docInfoReq: DocumentInfoRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<DocumentDto>>>;
    public updateDocuments(customerId: string, docInfoReq: DocumentInfoRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<DocumentDto>>>;
    public updateDocuments(customerId: string, docInfoReq: DocumentInfoRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling updateDocuments.');
        }
        if (docInfoReq === null || docInfoReq === undefined) {
            throw new Error('Required parameter docInfoReq was null or undefined when calling updateDocuments.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/customer/${this.configuration.encodeParam({name: "customerId", value: customerId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/documents`;
        return this.httpClient.request<Array<DocumentDto>>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: docInfoReq,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
