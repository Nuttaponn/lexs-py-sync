/**
 * KTB Backend for Frontend APIs.
 *
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { AccountDto } from '../model/accountDto';
// @ts-ignore
import { CloseLitigationRequest } from '../model/closeLitigationRequest';
// @ts-ignore
import { CloseLitigationResponse } from '../model/closeLitigationResponse';
// @ts-ignore
import { CollateralInfoRequest } from '../model/collateralInfoRequest';
// @ts-ignore
import { CollateralLexsStatusSearchRequest } from '../model/collateralLexsStatusSearchRequest';
// @ts-ignore
import { DocumentDto } from '../model/documentDto';
// @ts-ignore
import { DocumentInfoRequest } from '../model/documentInfoRequest';
// @ts-ignore
import { DocumentReceiveRequest } from '../model/documentReceiveRequest';
// @ts-ignore
import { DocumentSendRequest } from '../model/documentSendRequest';
// @ts-ignore
import { ErrorsList } from '../model/errorsList';
// @ts-ignore
import { ExpenseInfo } from '../model/expenseInfo';
// @ts-ignore
import { HeirInfoRequest } from '../model/heirInfoRequest';
// @ts-ignore
import { LexsUserTransferOption } from '../model/lexsUserTransferOption';
// @ts-ignore
import { LitigationDetailDto } from '../model/litigationDetailDto';
// @ts-ignore
import { LitigationFollowupDto } from '../model/litigationFollowupDto';
// @ts-ignore
import { LitigationMemoInfo } from '../model/litigationMemoInfo';
// @ts-ignore
import { LitigationSearchConditionRequest } from '../model/litigationSearchConditionRequest';
// @ts-ignore
import { MemoRequest } from '../model/memoRequest';
// @ts-ignore
import { MergeLitigationResponse } from '../model/mergeLitigationResponse';
// @ts-ignore
import { PageOfCollateralLexsStatusDto } from '../model/pageOfCollateralLexsStatusDto';
// @ts-ignore
import { PageOfCollateralLexsStatusExcelDto } from '../model/pageOfCollateralLexsStatusExcelDto';
// @ts-ignore
import { PageOfDocumentAuditLogDto } from '../model/pageOfDocumentAuditLogDto';
// @ts-ignore
import { PageOfDocumentExcelDto } from '../model/pageOfDocumentExcelDto';
// @ts-ignore
import { PageOfLitigationAuditLogDto } from '../model/pageOfLitigationAuditLogDto';
// @ts-ignore
import { PageOfLitigationDefermentDashboardExcelDto } from '../model/pageOfLitigationDefermentDashboardExcelDto';
// @ts-ignore
import { PageOfLitigationDto } from '../model/pageOfLitigationDto';
// @ts-ignore
import { PageOfLitigationExcelDto } from '../model/pageOfLitigationExcelDto';
// @ts-ignore
import { PageOfLitigationStatusDashboardExcelDto } from '../model/pageOfLitigationStatusDashboardExcelDto';
// @ts-ignore
import { PersonHeirInfoDto } from '../model/personHeirInfoDto';
// @ts-ignore
import { PersonInfoRequest } from '../model/personInfoRequest';
// @ts-ignore
import { PersonLitigationInfo } from '../model/personLitigationInfo';
// @ts-ignore
import { PersonLitigationInfoRequest } from '../model/personLitigationInfoRequest';
// @ts-ignore
import { RejectRequest } from '../model/rejectRequest';
// @ts-ignore
import { ReturnOriginalCoverResponse } from '../model/returnOriginalCoverResponse';
// @ts-ignore
import { SendReceiveDocumentDto } from '../model/sendReceiveDocumentDto';
// @ts-ignore
import { TransferLitigationRequest } from '../model/transferLitigationRequest';
// @ts-ignore
import { UpdateSubAccountRequest } from '../model/updateSubAccountRequest';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class LitigationControllerService {

    protected basePath = 'https://lexsdev.krungthai/ktb/rest/lexs';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * @param taskId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public approve(taskId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public approve(taskId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public approve(taskId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public approve(taskId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling approve.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/${this.configuration.encodeParam({name: "taskId", value: taskId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/approve`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * closeLitigation
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public closeLitigation(request: CloseLitigationRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<CloseLitigationResponse>;
    public closeLitigation(request: CloseLitigationRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CloseLitigationResponse>>;
    public closeLitigation(request: CloseLitigationRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CloseLitigationResponse>>;
    public closeLitigation(request: CloseLitigationRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling closeLitigation.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/close`;
        return this.httpClient.request<CloseLitigationResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * documentExcel
     * @param litigationId litigationId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public documentExcel(litigationId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<PageOfDocumentExcelDto>;
    public documentExcel(litigationId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PageOfDocumentExcelDto>>;
    public documentExcel(litigationId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PageOfDocumentExcelDto>>;
    public documentExcel(litigationId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (litigationId === null || litigationId === undefined) {
            throw new Error('Required parameter litigationId was null or undefined when calling documentExcel.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/${this.configuration.encodeParam({name: "litigationId", value: litigationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/document/excel`;
        return this.httpClient.request<PageOfDocumentExcelDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * downloadCollateralLexsStatus
     * @param searchMode 
     * @param tab 
     * @param accountNo 
     * @param amdUnit 
     * @param billNo 
     * @param blackCaseId 
     * @param caseCreator 
     * @param caseStatus 
     * @param citizenId 
     * @param collateralLexsStatusDashboard 
     * @param collateralSubTypeCode 
     * @param collateralTypeCode 
     * @param court 
     * @param customerId 
     * @param customerName 
     * @param customerStatus 
     * @param customerSurname 
     * @param debtTransferTo 
     * @param debtor 
     * @param kbdId 
     * @param legalStatus 
     * @param litigationCloseStatus 
     * @param litigationId 
     * @param loanType 
     * @param orgCode 
     * @param ownerId 
     * @param redCaseId 
     * @param responseUnit 
     * @param roomNo 
     * @param samFlag 
     * @param searchScope 
     * @param searchString 
     * @param sortBy sortBy
     * @param sortOrder sortOrder
     * @param tamcFlag 
     * @param writeOffStatus 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadCollateralLexsStatus(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, collateralLexsStatusDashboard?: string, collateralSubTypeCode?: string, collateralTypeCode?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<PageOfCollateralLexsStatusExcelDto>;
    public downloadCollateralLexsStatus(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, collateralLexsStatusDashboard?: string, collateralSubTypeCode?: string, collateralTypeCode?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PageOfCollateralLexsStatusExcelDto>>;
    public downloadCollateralLexsStatus(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, collateralLexsStatusDashboard?: string, collateralSubTypeCode?: string, collateralTypeCode?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PageOfCollateralLexsStatusExcelDto>>;
    public downloadCollateralLexsStatus(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, collateralLexsStatusDashboard?: string, collateralSubTypeCode?: string, collateralTypeCode?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (searchMode === null || searchMode === undefined) {
            throw new Error('Required parameter searchMode was null or undefined when calling downloadCollateralLexsStatus.');
        }
        if (tab === null || tab === undefined) {
            throw new Error('Required parameter tab was null or undefined when calling downloadCollateralLexsStatus.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (accountNo !== undefined && accountNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountNo, 'accountNo');
        }
        if (amdUnit !== undefined && amdUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>amdUnit, 'amdUnit');
        }
        if (billNo !== undefined && billNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>billNo, 'billNo');
        }
        if (blackCaseId !== undefined && blackCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blackCaseId, 'blackCaseId');
        }
        if (caseCreator !== undefined && caseCreator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseCreator, 'caseCreator');
        }
        if (caseStatus !== undefined && caseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseStatus, 'caseStatus');
        }
        if (citizenId !== undefined && citizenId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>citizenId, 'citizenId');
        }
        if (collateralLexsStatusDashboard !== undefined && collateralLexsStatusDashboard !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>collateralLexsStatusDashboard, 'collateralLexsStatusDashboard');
        }
        if (collateralSubTypeCode !== undefined && collateralSubTypeCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>collateralSubTypeCode, 'collateralSubTypeCode');
        }
        if (collateralTypeCode !== undefined && collateralTypeCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>collateralTypeCode, 'collateralTypeCode');
        }
        if (court !== undefined && court !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>court, 'court');
        }
        if (customerId !== undefined && customerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerId, 'customerId');
        }
        if (customerName !== undefined && customerName !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerName, 'customerName');
        }
        if (customerStatus !== undefined && customerStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerStatus, 'customerStatus');
        }
        if (customerSurname !== undefined && customerSurname !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerSurname, 'customerSurname');
        }
        if (debtTransferTo) {
            debtTransferTo.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'debtTransferTo');
            })
        }
        if (debtor !== undefined && debtor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>debtor, 'debtor');
        }
        if (kbdId !== undefined && kbdId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>kbdId, 'kbdId');
        }
        if (legalStatus !== undefined && legalStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>legalStatus, 'legalStatus');
        }
        if (litigationCloseStatus !== undefined && litigationCloseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationCloseStatus, 'litigationCloseStatus');
        }
        if (litigationId !== undefined && litigationId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationId, 'litigationId');
        }
        if (loanType) {
            loanType.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'loanType');
            })
        }
        if (orgCode !== undefined && orgCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>orgCode, 'orgCode');
        }
        if (ownerId !== undefined && ownerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ownerId, 'ownerId');
        }
        if (redCaseId !== undefined && redCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>redCaseId, 'redCaseId');
        }
        if (responseUnit !== undefined && responseUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>responseUnit, 'responseUnit');
        }
        if (roomNo !== undefined && roomNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>roomNo, 'roomNo');
        }
        if (samFlag !== undefined && samFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>samFlag, 'samFlag');
        }
        if (searchMode !== undefined && searchMode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchMode, 'searchMode');
        }
        if (searchScope !== undefined && searchScope !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchScope, 'searchScope');
        }
        if (searchString !== undefined && searchString !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchString, 'searchString');
        }
        if (sortBy) {
            sortBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sortBy');
            })
        }
        if (sortOrder !== undefined && sortOrder !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortOrder, 'sortOrder');
        }
        if (tab !== undefined && tab !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tab, 'tab');
        }
        if (tamcFlag !== undefined && tamcFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tamcFlag, 'tamcFlag');
        }
        if (writeOffStatus !== undefined && writeOffStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>writeOffStatus, 'writeOffStatus');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/workbench/collateral-lexs-status/excel`;
        return this.httpClient.request<PageOfCollateralLexsStatusExcelDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param litigationId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadKtbLogisticDoc(litigationId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ReturnOriginalCoverResponse>;
    public downloadKtbLogisticDoc(litigationId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ReturnOriginalCoverResponse>>;
    public downloadKtbLogisticDoc(litigationId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ReturnOriginalCoverResponse>>;
    public downloadKtbLogisticDoc(litigationId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (litigationId === null || litigationId === undefined) {
            throw new Error('Required parameter litigationId was null or undefined when calling downloadKtbLogisticDoc.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/${this.configuration.encodeParam({name: "litigationId", value: litigationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/documents/download-ktb-logistic-document`;
        return this.httpClient.request<ReturnOriginalCoverResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param litigationId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadReturnOriginalCover(litigationId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ReturnOriginalCoverResponse>;
    public downloadReturnOriginalCover(litigationId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ReturnOriginalCoverResponse>>;
    public downloadReturnOriginalCover(litigationId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ReturnOriginalCoverResponse>>;
    public downloadReturnOriginalCover(litigationId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (litigationId === null || litigationId === undefined) {
            throw new Error('Required parameter litigationId was null or undefined when calling downloadReturnOriginalCover.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (litigationId !== undefined && litigationId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationId, 'litigationId');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation//documents/download-return-original-cover`;
        return this.httpClient.request<ReturnOriginalCoverResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param litigationId 
     * @param serviceName 
     * @param taskId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAdditionalPersonsRelation(litigationId: string, serviceName: string, taskId?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PersonLitigationInfo>;
    public getAdditionalPersonsRelation(litigationId: string, serviceName: string, taskId?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PersonLitigationInfo>>;
    public getAdditionalPersonsRelation(litigationId: string, serviceName: string, taskId?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PersonLitigationInfo>>;
    public getAdditionalPersonsRelation(litigationId: string, serviceName: string, taskId?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (litigationId === null || litigationId === undefined) {
            throw new Error('Required parameter litigationId was null or undefined when calling getAdditionalPersonsRelation.');
        }
        if (serviceName === null || serviceName === undefined) {
            throw new Error('Required parameter serviceName was null or undefined when calling getAdditionalPersonsRelation.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (taskId !== undefined && taskId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>taskId, 'taskId');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/${this.configuration.encodeParam({name: "litigationId", value: litigationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/persons-relation/${this.configuration.encodeParam({name: "serviceName", value: serviceName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<PersonLitigationInfo>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param litigationId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getExpenseInfo(litigationId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ExpenseInfo>;
    public getExpenseInfo(litigationId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ExpenseInfo>>;
    public getExpenseInfo(litigationId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ExpenseInfo>>;
    public getExpenseInfo(litigationId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (litigationId === null || litigationId === undefined) {
            throw new Error('Required parameter litigationId was null or undefined when calling getExpenseInfo.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/${this.configuration.encodeParam({name: "litigationId", value: litigationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/expense-info`;
        return this.httpClient.request<ExpenseInfo>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param litigationId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFollowUp(litigationId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<LitigationFollowupDto>>;
    public getFollowUp(litigationId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<LitigationFollowupDto>>>;
    public getFollowUp(litigationId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<LitigationFollowupDto>>>;
    public getFollowUp(litigationId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (litigationId === null || litigationId === undefined) {
            throw new Error('Required parameter litigationId was null or undefined when calling getFollowUp.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/${this.configuration.encodeParam({name: "litigationId", value: litigationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/followup`;
        return this.httpClient.request<Array<LitigationFollowupDto>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param litigationId 
     * @param personId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHeirInformation(litigationId: string, personId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PersonHeirInfoDto>;
    public getHeirInformation(litigationId: string, personId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PersonHeirInfoDto>>;
    public getHeirInformation(litigationId: string, personId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PersonHeirInfoDto>>;
    public getHeirInformation(litigationId: string, personId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (litigationId === null || litigationId === undefined) {
            throw new Error('Required parameter litigationId was null or undefined when calling getHeirInformation.');
        }
        if (personId === null || personId === undefined) {
            throw new Error('Required parameter personId was null or undefined when calling getHeirInformation.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/${this.configuration.encodeParam({name: "litigationId", value: litigationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/get-heir-info/${this.configuration.encodeParam({name: "personId", value: personId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<PersonHeirInfoDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param litigationId 
     * @param taskId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLitigation(litigationId: string, taskId?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<LitigationDetailDto>;
    public getLitigation(litigationId: string, taskId?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<LitigationDetailDto>>;
    public getLitigation(litigationId: string, taskId?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<LitigationDetailDto>>;
    public getLitigation(litigationId: string, taskId?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (litigationId === null || litigationId === undefined) {
            throw new Error('Required parameter litigationId was null or undefined when calling getLitigation.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (taskId !== undefined && taskId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>taskId, 'taskId');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/${this.configuration.encodeParam({name: "litigationId", value: litigationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<LitigationDetailDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param litigationId 
     * @param searchDesc 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMemoLitigation(litigationId: string, searchDesc?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<LitigationMemoInfo>;
    public getMemoLitigation(litigationId: string, searchDesc?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<LitigationMemoInfo>>;
    public getMemoLitigation(litigationId: string, searchDesc?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<LitigationMemoInfo>>;
    public getMemoLitigation(litigationId: string, searchDesc?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (litigationId === null || litigationId === undefined) {
            throw new Error('Required parameter litigationId was null or undefined when calling getMemoLitigation.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (searchDesc !== undefined && searchDesc !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchDesc, 'searchDesc');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/${this.configuration.encodeParam({name: "litigationId", value: litigationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/memo`;
        return this.httpClient.request<LitigationMemoInfo>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * inquireAuditLog
     * @param litigationId litigationId
     * @param action action
     * @param page page
     * @param size size
     * @param target target
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public inquireAuditLog(litigationId: string, action?: string, page?: number, size?: number, target?: string, userId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PageOfLitigationAuditLogDto>;
    public inquireAuditLog(litigationId: string, action?: string, page?: number, size?: number, target?: string, userId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PageOfLitigationAuditLogDto>>;
    public inquireAuditLog(litigationId: string, action?: string, page?: number, size?: number, target?: string, userId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PageOfLitigationAuditLogDto>>;
    public inquireAuditLog(litigationId: string, action?: string, page?: number, size?: number, target?: string, userId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (litigationId === null || litigationId === undefined) {
            throw new Error('Required parameter litigationId was null or undefined when calling inquireAuditLog.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (action !== undefined && action !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>action, 'action');
        }
        if (page !== undefined && page !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>page, 'page');
        }
        if (size !== undefined && size !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>size, 'size');
        }
        if (target !== undefined && target !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>target, 'target');
        }
        if (userId !== undefined && userId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>userId, 'userId');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/${this.configuration.encodeParam({name: "litigationId", value: litigationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/audit-log`;
        return this.httpClient.request<PageOfLitigationAuditLogDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * inquiryCollateralLexsStatus
     * @param searchMode 
     * @param tab 
     * @param accountNo 
     * @param amdUnit 
     * @param billNo 
     * @param blackCaseId 
     * @param caseCreator 
     * @param caseStatus 
     * @param citizenId 
     * @param collateralLexsStatusDashboard 
     * @param collateralSubTypeCode 
     * @param collateralTypeCode 
     * @param court 
     * @param customerId 
     * @param customerName 
     * @param customerStatus 
     * @param customerSurname 
     * @param debtTransferTo 
     * @param debtor 
     * @param kbdId 
     * @param legalStatus 
     * @param litigationCloseStatus 
     * @param litigationId 
     * @param loanType 
     * @param orgCode 
     * @param ownerId 
     * @param page page
     * @param redCaseId 
     * @param responseUnit 
     * @param roomNo 
     * @param samFlag 
     * @param searchScope 
     * @param searchString 
     * @param size size
     * @param sortBy sortBy
     * @param sortOrder sortOrder
     * @param tamcFlag 
     * @param writeOffStatus 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public inquiryCollateralLexsStatus(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, collateralLexsStatusDashboard?: string, collateralSubTypeCode?: string, collateralTypeCode?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PageOfCollateralLexsStatusDto>;
    public inquiryCollateralLexsStatus(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, collateralLexsStatusDashboard?: string, collateralSubTypeCode?: string, collateralTypeCode?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PageOfCollateralLexsStatusDto>>;
    public inquiryCollateralLexsStatus(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, collateralLexsStatusDashboard?: string, collateralSubTypeCode?: string, collateralTypeCode?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PageOfCollateralLexsStatusDto>>;
    public inquiryCollateralLexsStatus(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, collateralLexsStatusDashboard?: string, collateralSubTypeCode?: string, collateralTypeCode?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, kbdId?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, tamcFlag?: string, writeOffStatus?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (searchMode === null || searchMode === undefined) {
            throw new Error('Required parameter searchMode was null or undefined when calling inquiryCollateralLexsStatus.');
        }
        if (tab === null || tab === undefined) {
            throw new Error('Required parameter tab was null or undefined when calling inquiryCollateralLexsStatus.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (accountNo !== undefined && accountNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountNo, 'accountNo');
        }
        if (amdUnit !== undefined && amdUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>amdUnit, 'amdUnit');
        }
        if (billNo !== undefined && billNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>billNo, 'billNo');
        }
        if (blackCaseId !== undefined && blackCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blackCaseId, 'blackCaseId');
        }
        if (caseCreator !== undefined && caseCreator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseCreator, 'caseCreator');
        }
        if (caseStatus !== undefined && caseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseStatus, 'caseStatus');
        }
        if (citizenId !== undefined && citizenId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>citizenId, 'citizenId');
        }
        if (collateralLexsStatusDashboard !== undefined && collateralLexsStatusDashboard !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>collateralLexsStatusDashboard, 'collateralLexsStatusDashboard');
        }
        if (collateralSubTypeCode !== undefined && collateralSubTypeCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>collateralSubTypeCode, 'collateralSubTypeCode');
        }
        if (collateralTypeCode !== undefined && collateralTypeCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>collateralTypeCode, 'collateralTypeCode');
        }
        if (court !== undefined && court !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>court, 'court');
        }
        if (customerId !== undefined && customerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerId, 'customerId');
        }
        if (customerName !== undefined && customerName !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerName, 'customerName');
        }
        if (customerStatus !== undefined && customerStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerStatus, 'customerStatus');
        }
        if (customerSurname !== undefined && customerSurname !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerSurname, 'customerSurname');
        }
        if (debtTransferTo) {
            debtTransferTo.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'debtTransferTo');
            })
        }
        if (debtor !== undefined && debtor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>debtor, 'debtor');
        }
        if (kbdId !== undefined && kbdId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>kbdId, 'kbdId');
        }
        if (legalStatus !== undefined && legalStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>legalStatus, 'legalStatus');
        }
        if (litigationCloseStatus !== undefined && litigationCloseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationCloseStatus, 'litigationCloseStatus');
        }
        if (litigationId !== undefined && litigationId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationId, 'litigationId');
        }
        if (loanType) {
            loanType.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'loanType');
            })
        }
        if (orgCode !== undefined && orgCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>orgCode, 'orgCode');
        }
        if (ownerId !== undefined && ownerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ownerId, 'ownerId');
        }
        if (page !== undefined && page !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>page, 'page');
        }
        if (redCaseId !== undefined && redCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>redCaseId, 'redCaseId');
        }
        if (responseUnit !== undefined && responseUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>responseUnit, 'responseUnit');
        }
        if (roomNo !== undefined && roomNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>roomNo, 'roomNo');
        }
        if (samFlag !== undefined && samFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>samFlag, 'samFlag');
        }
        if (searchMode !== undefined && searchMode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchMode, 'searchMode');
        }
        if (searchScope !== undefined && searchScope !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchScope, 'searchScope');
        }
        if (searchString !== undefined && searchString !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchString, 'searchString');
        }
        if (size !== undefined && size !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>size, 'size');
        }
        if (sortBy) {
            sortBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sortBy');
            })
        }
        if (sortOrder !== undefined && sortOrder !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortOrder, 'sortOrder');
        }
        if (tab !== undefined && tab !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tab, 'tab');
        }
        if (tamcFlag !== undefined && tamcFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tamcFlag, 'tamcFlag');
        }
        if (writeOffStatus !== undefined && writeOffStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>writeOffStatus, 'writeOffStatus');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/workbench/collateral-lexs-status`;
        return this.httpClient.request<PageOfCollateralLexsStatusDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * inquiryDocumentAuditLog
     * @param litigationId litigationId
     * @param documentTemplateId documentTemplateId
     * @param page page
     * @param size size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public inquiryDocumentAuditLog(litigationId: string, documentTemplateId?: string, page?: number, size?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PageOfDocumentAuditLogDto>;
    public inquiryDocumentAuditLog(litigationId: string, documentTemplateId?: string, page?: number, size?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PageOfDocumentAuditLogDto>>;
    public inquiryDocumentAuditLog(litigationId: string, documentTemplateId?: string, page?: number, size?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PageOfDocumentAuditLogDto>>;
    public inquiryDocumentAuditLog(litigationId: string, documentTemplateId?: string, page?: number, size?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (litigationId === null || litigationId === undefined) {
            throw new Error('Required parameter litigationId was null or undefined when calling inquiryDocumentAuditLog.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (documentTemplateId !== undefined && documentTemplateId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>documentTemplateId, 'documentTemplateId');
        }
        if (page !== undefined && page !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>page, 'page');
        }
        if (size !== undefined && size !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>size, 'size');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/${this.configuration.encodeParam({name: "litigationId", value: litigationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/document-audit-log`;
        return this.httpClient.request<PageOfDocumentAuditLogDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * inquiryLitigation
     * @param searchMode 
     * @param tab 
     * @param accountNo 
     * @param amdUnit 
     * @param billNo 
     * @param blackCaseId 
     * @param caseCreator 
     * @param caseStatus 
     * @param citizenId 
     * @param court 
     * @param customerId 
     * @param customerName 
     * @param customerStatus 
     * @param customerSurname 
     * @param debtTransferTo 
     * @param debtor 
     * @param deferDashboard 
     * @param deferExecDashboard 
     * @param kbdId 
     * @param lawyer 
     * @param legalStatus 
     * @param litigationCloseStatus 
     * @param litigationId 
     * @param loanType 
     * @param orgCode 
     * @param ownerId 
     * @param page page
     * @param redCaseId 
     * @param responseUnit 
     * @param roomNo 
     * @param samFlag 
     * @param searchScope 
     * @param searchString 
     * @param size size
     * @param sortBy sortBy
     * @param sortOrder sortOrder
     * @param statusDashboard 
     * @param tamcFlag 
     * @param writeOffStatus 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public inquiryLitigation(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, deferDashboard?: string, deferExecDashboard?: string, kbdId?: string, lawyer?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, statusDashboard?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PageOfLitigationDto>;
    public inquiryLitigation(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, deferDashboard?: string, deferExecDashboard?: string, kbdId?: string, lawyer?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, statusDashboard?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PageOfLitigationDto>>;
    public inquiryLitigation(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, deferDashboard?: string, deferExecDashboard?: string, kbdId?: string, lawyer?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, statusDashboard?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PageOfLitigationDto>>;
    public inquiryLitigation(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, deferDashboard?: string, deferExecDashboard?: string, kbdId?: string, lawyer?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, page?: number, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, size?: number, sortBy?: Array<string>, sortOrder?: string, statusDashboard?: string, tamcFlag?: string, writeOffStatus?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (searchMode === null || searchMode === undefined) {
            throw new Error('Required parameter searchMode was null or undefined when calling inquiryLitigation.');
        }
        if (tab === null || tab === undefined) {
            throw new Error('Required parameter tab was null or undefined when calling inquiryLitigation.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (accountNo !== undefined && accountNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountNo, 'accountNo');
        }
        if (amdUnit !== undefined && amdUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>amdUnit, 'amdUnit');
        }
        if (billNo !== undefined && billNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>billNo, 'billNo');
        }
        if (blackCaseId !== undefined && blackCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blackCaseId, 'blackCaseId');
        }
        if (caseCreator !== undefined && caseCreator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseCreator, 'caseCreator');
        }
        if (caseStatus !== undefined && caseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseStatus, 'caseStatus');
        }
        if (citizenId !== undefined && citizenId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>citizenId, 'citizenId');
        }
        if (court !== undefined && court !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>court, 'court');
        }
        if (customerId !== undefined && customerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerId, 'customerId');
        }
        if (customerName !== undefined && customerName !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerName, 'customerName');
        }
        if (customerStatus !== undefined && customerStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerStatus, 'customerStatus');
        }
        if (customerSurname !== undefined && customerSurname !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerSurname, 'customerSurname');
        }
        if (debtTransferTo) {
            debtTransferTo.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'debtTransferTo');
            })
        }
        if (debtor !== undefined && debtor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>debtor, 'debtor');
        }
        if (deferDashboard !== undefined && deferDashboard !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>deferDashboard, 'deferDashboard');
        }
        if (deferExecDashboard !== undefined && deferExecDashboard !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>deferExecDashboard, 'deferExecDashboard');
        }
        if (kbdId !== undefined && kbdId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>kbdId, 'kbdId');
        }
        if (lawyer !== undefined && lawyer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lawyer, 'lawyer');
        }
        if (legalStatus !== undefined && legalStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>legalStatus, 'legalStatus');
        }
        if (litigationCloseStatus !== undefined && litigationCloseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationCloseStatus, 'litigationCloseStatus');
        }
        if (litigationId !== undefined && litigationId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationId, 'litigationId');
        }
        if (loanType) {
            loanType.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'loanType');
            })
        }
        if (orgCode !== undefined && orgCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>orgCode, 'orgCode');
        }
        if (ownerId !== undefined && ownerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ownerId, 'ownerId');
        }
        if (page !== undefined && page !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>page, 'page');
        }
        if (redCaseId !== undefined && redCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>redCaseId, 'redCaseId');
        }
        if (responseUnit !== undefined && responseUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>responseUnit, 'responseUnit');
        }
        if (roomNo !== undefined && roomNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>roomNo, 'roomNo');
        }
        if (samFlag !== undefined && samFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>samFlag, 'samFlag');
        }
        if (searchMode !== undefined && searchMode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchMode, 'searchMode');
        }
        if (searchScope !== undefined && searchScope !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchScope, 'searchScope');
        }
        if (searchString !== undefined && searchString !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchString, 'searchString');
        }
        if (size !== undefined && size !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>size, 'size');
        }
        if (sortBy) {
            sortBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sortBy');
            })
        }
        if (sortOrder !== undefined && sortOrder !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortOrder, 'sortOrder');
        }
        if (statusDashboard !== undefined && statusDashboard !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>statusDashboard, 'statusDashboard');
        }
        if (tab !== undefined && tab !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tab, 'tab');
        }
        if (tamcFlag !== undefined && tamcFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tamcFlag, 'tamcFlag');
        }
        if (writeOffStatus !== undefined && writeOffStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>writeOffStatus, 'writeOffStatus');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation`;
        return this.httpClient.request<PageOfLitigationDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * inquiryLitigationDownload
     * @param searchMode 
     * @param tab 
     * @param accountNo 
     * @param amdUnit 
     * @param billNo 
     * @param blackCaseId 
     * @param caseCreator 
     * @param caseStatus 
     * @param citizenId 
     * @param court 
     * @param customerId 
     * @param customerName 
     * @param customerStatus 
     * @param customerSurname 
     * @param debtTransferTo 
     * @param debtor 
     * @param deferDashboard 
     * @param deferExecDashboard 
     * @param kbdId 
     * @param lawyer 
     * @param legalStatus 
     * @param litigationCloseStatus 
     * @param litigationId 
     * @param loanType 
     * @param orgCode 
     * @param ownerId 
     * @param redCaseId 
     * @param responseUnit 
     * @param roomNo 
     * @param samFlag 
     * @param searchScope 
     * @param searchString 
     * @param sortBy sortBy
     * @param sortOrder sortOrder
     * @param statusDashboard 
     * @param tamcFlag 
     * @param writeOffStatus 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public inquiryLitigationDownload(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, deferDashboard?: string, deferExecDashboard?: string, kbdId?: string, lawyer?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, sortBy?: Array<string>, sortOrder?: string, statusDashboard?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<PageOfLitigationExcelDto>;
    public inquiryLitigationDownload(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, deferDashboard?: string, deferExecDashboard?: string, kbdId?: string, lawyer?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, sortBy?: Array<string>, sortOrder?: string, statusDashboard?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PageOfLitigationExcelDto>>;
    public inquiryLitigationDownload(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, deferDashboard?: string, deferExecDashboard?: string, kbdId?: string, lawyer?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, sortBy?: Array<string>, sortOrder?: string, statusDashboard?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PageOfLitigationExcelDto>>;
    public inquiryLitigationDownload(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, deferDashboard?: string, deferExecDashboard?: string, kbdId?: string, lawyer?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, sortBy?: Array<string>, sortOrder?: string, statusDashboard?: string, tamcFlag?: string, writeOffStatus?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (searchMode === null || searchMode === undefined) {
            throw new Error('Required parameter searchMode was null or undefined when calling inquiryLitigationDownload.');
        }
        if (tab === null || tab === undefined) {
            throw new Error('Required parameter tab was null or undefined when calling inquiryLitigationDownload.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (accountNo !== undefined && accountNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountNo, 'accountNo');
        }
        if (amdUnit !== undefined && amdUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>amdUnit, 'amdUnit');
        }
        if (billNo !== undefined && billNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>billNo, 'billNo');
        }
        if (blackCaseId !== undefined && blackCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blackCaseId, 'blackCaseId');
        }
        if (caseCreator !== undefined && caseCreator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseCreator, 'caseCreator');
        }
        if (caseStatus !== undefined && caseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseStatus, 'caseStatus');
        }
        if (citizenId !== undefined && citizenId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>citizenId, 'citizenId');
        }
        if (court !== undefined && court !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>court, 'court');
        }
        if (customerId !== undefined && customerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerId, 'customerId');
        }
        if (customerName !== undefined && customerName !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerName, 'customerName');
        }
        if (customerStatus !== undefined && customerStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerStatus, 'customerStatus');
        }
        if (customerSurname !== undefined && customerSurname !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerSurname, 'customerSurname');
        }
        if (debtTransferTo) {
            debtTransferTo.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'debtTransferTo');
            })
        }
        if (debtor !== undefined && debtor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>debtor, 'debtor');
        }
        if (deferDashboard !== undefined && deferDashboard !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>deferDashboard, 'deferDashboard');
        }
        if (deferExecDashboard !== undefined && deferExecDashboard !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>deferExecDashboard, 'deferExecDashboard');
        }
        if (kbdId !== undefined && kbdId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>kbdId, 'kbdId');
        }
        if (lawyer !== undefined && lawyer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lawyer, 'lawyer');
        }
        if (legalStatus !== undefined && legalStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>legalStatus, 'legalStatus');
        }
        if (litigationCloseStatus !== undefined && litigationCloseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationCloseStatus, 'litigationCloseStatus');
        }
        if (litigationId !== undefined && litigationId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationId, 'litigationId');
        }
        if (loanType) {
            loanType.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'loanType');
            })
        }
        if (orgCode !== undefined && orgCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>orgCode, 'orgCode');
        }
        if (ownerId !== undefined && ownerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ownerId, 'ownerId');
        }
        if (redCaseId !== undefined && redCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>redCaseId, 'redCaseId');
        }
        if (responseUnit !== undefined && responseUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>responseUnit, 'responseUnit');
        }
        if (roomNo !== undefined && roomNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>roomNo, 'roomNo');
        }
        if (samFlag !== undefined && samFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>samFlag, 'samFlag');
        }
        if (searchMode !== undefined && searchMode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchMode, 'searchMode');
        }
        if (searchScope !== undefined && searchScope !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchScope, 'searchScope');
        }
        if (searchString !== undefined && searchString !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchString, 'searchString');
        }
        if (sortBy) {
            sortBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sortBy');
            })
        }
        if (sortOrder !== undefined && sortOrder !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortOrder, 'sortOrder');
        }
        if (statusDashboard !== undefined && statusDashboard !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>statusDashboard, 'statusDashboard');
        }
        if (tab !== undefined && tab !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tab, 'tab');
        }
        if (tamcFlag !== undefined && tamcFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tamcFlag, 'tamcFlag');
        }
        if (writeOffStatus !== undefined && writeOffStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>writeOffStatus, 'writeOffStatus');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/excel`;
        return this.httpClient.request<PageOfLitigationExcelDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * inquiryMergedAccounts
     * @param litigationIds litigationIds
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public inquiryMergedAccounts(litigationIds: Array<string>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<AccountDto>>;
    public inquiryMergedAccounts(litigationIds: Array<string>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<AccountDto>>>;
    public inquiryMergedAccounts(litigationIds: Array<string>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<AccountDto>>>;
    public inquiryMergedAccounts(litigationIds: Array<string>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (litigationIds === null || litigationIds === undefined) {
            throw new Error('Required parameter litigationIds was null or undefined when calling inquiryMergedAccounts.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (litigationIds) {
            litigationIds.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'litigationIds');
            })
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/merge/accounts`;
        return this.httpClient.request<Array<AccountDto>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listAvailableSubAccounts
     * @param litigationId litigationId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listAvailableSubAccounts(litigationId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<AccountDto>>;
    public listAvailableSubAccounts(litigationId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<AccountDto>>>;
    public listAvailableSubAccounts(litigationId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<AccountDto>>>;
    public listAvailableSubAccounts(litigationId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (litigationId === null || litigationId === undefined) {
            throw new Error('Required parameter litigationId was null or undefined when calling listAvailableSubAccounts.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/${this.configuration.encodeParam({name: "litigationId", value: litigationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/subaccounts`;
        return this.httpClient.request<Array<AccountDto>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * litigationDefermentDownloadExcel
     * @param searchMode 
     * @param tab 
     * @param accountNo 
     * @param amdUnit 
     * @param billNo 
     * @param blackCaseId 
     * @param caseCreator 
     * @param caseStatus 
     * @param citizenId 
     * @param court 
     * @param customerId 
     * @param customerName 
     * @param customerStatus 
     * @param customerSurname 
     * @param debtTransferTo 
     * @param debtor 
     * @param deferDashboard 
     * @param deferExecDashboard 
     * @param kbdId 
     * @param lawyer 
     * @param legalStatus 
     * @param litigationCloseStatus 
     * @param litigationId 
     * @param loanType 
     * @param orgCode 
     * @param ownerId 
     * @param redCaseId 
     * @param responseUnit 
     * @param roomNo 
     * @param samFlag 
     * @param searchScope 
     * @param searchString 
     * @param sortBy sortBy
     * @param sortOrder sortOrder
     * @param statusDashboard 
     * @param tamcFlag 
     * @param writeOffStatus 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public litigationDefermentDownloadExcel(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, deferDashboard?: string, deferExecDashboard?: string, kbdId?: string, lawyer?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, sortBy?: Array<string>, sortOrder?: string, statusDashboard?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<PageOfLitigationDefermentDashboardExcelDto>;
    public litigationDefermentDownloadExcel(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, deferDashboard?: string, deferExecDashboard?: string, kbdId?: string, lawyer?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, sortBy?: Array<string>, sortOrder?: string, statusDashboard?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PageOfLitigationDefermentDashboardExcelDto>>;
    public litigationDefermentDownloadExcel(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, deferDashboard?: string, deferExecDashboard?: string, kbdId?: string, lawyer?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, sortBy?: Array<string>, sortOrder?: string, statusDashboard?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PageOfLitigationDefermentDashboardExcelDto>>;
    public litigationDefermentDownloadExcel(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, deferDashboard?: string, deferExecDashboard?: string, kbdId?: string, lawyer?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, sortBy?: Array<string>, sortOrder?: string, statusDashboard?: string, tamcFlag?: string, writeOffStatus?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (searchMode === null || searchMode === undefined) {
            throw new Error('Required parameter searchMode was null or undefined when calling litigationDefermentDownloadExcel.');
        }
        if (tab === null || tab === undefined) {
            throw new Error('Required parameter tab was null or undefined when calling litigationDefermentDownloadExcel.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (accountNo !== undefined && accountNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountNo, 'accountNo');
        }
        if (amdUnit !== undefined && amdUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>amdUnit, 'amdUnit');
        }
        if (billNo !== undefined && billNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>billNo, 'billNo');
        }
        if (blackCaseId !== undefined && blackCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blackCaseId, 'blackCaseId');
        }
        if (caseCreator !== undefined && caseCreator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseCreator, 'caseCreator');
        }
        if (caseStatus !== undefined && caseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseStatus, 'caseStatus');
        }
        if (citizenId !== undefined && citizenId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>citizenId, 'citizenId');
        }
        if (court !== undefined && court !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>court, 'court');
        }
        if (customerId !== undefined && customerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerId, 'customerId');
        }
        if (customerName !== undefined && customerName !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerName, 'customerName');
        }
        if (customerStatus !== undefined && customerStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerStatus, 'customerStatus');
        }
        if (customerSurname !== undefined && customerSurname !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerSurname, 'customerSurname');
        }
        if (debtTransferTo) {
            debtTransferTo.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'debtTransferTo');
            })
        }
        if (debtor !== undefined && debtor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>debtor, 'debtor');
        }
        if (deferDashboard !== undefined && deferDashboard !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>deferDashboard, 'deferDashboard');
        }
        if (deferExecDashboard !== undefined && deferExecDashboard !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>deferExecDashboard, 'deferExecDashboard');
        }
        if (kbdId !== undefined && kbdId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>kbdId, 'kbdId');
        }
        if (lawyer !== undefined && lawyer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lawyer, 'lawyer');
        }
        if (legalStatus !== undefined && legalStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>legalStatus, 'legalStatus');
        }
        if (litigationCloseStatus !== undefined && litigationCloseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationCloseStatus, 'litigationCloseStatus');
        }
        if (litigationId !== undefined && litigationId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationId, 'litigationId');
        }
        if (loanType) {
            loanType.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'loanType');
            })
        }
        if (orgCode !== undefined && orgCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>orgCode, 'orgCode');
        }
        if (ownerId !== undefined && ownerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ownerId, 'ownerId');
        }
        if (redCaseId !== undefined && redCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>redCaseId, 'redCaseId');
        }
        if (responseUnit !== undefined && responseUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>responseUnit, 'responseUnit');
        }
        if (roomNo !== undefined && roomNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>roomNo, 'roomNo');
        }
        if (samFlag !== undefined && samFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>samFlag, 'samFlag');
        }
        if (searchMode !== undefined && searchMode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchMode, 'searchMode');
        }
        if (searchScope !== undefined && searchScope !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchScope, 'searchScope');
        }
        if (searchString !== undefined && searchString !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchString, 'searchString');
        }
        if (sortBy) {
            sortBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sortBy');
            })
        }
        if (sortOrder !== undefined && sortOrder !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortOrder, 'sortOrder');
        }
        if (statusDashboard !== undefined && statusDashboard !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>statusDashboard, 'statusDashboard');
        }
        if (tab !== undefined && tab !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tab, 'tab');
        }
        if (tamcFlag !== undefined && tamcFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tamcFlag, 'tamcFlag');
        }
        if (writeOffStatus !== undefined && writeOffStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>writeOffStatus, 'writeOffStatus');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/workbench/deferment/excel`;
        return this.httpClient.request<PageOfLitigationDefermentDashboardExcelDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * litigationDefermentExecDownloadExcel
     * @param searchMode 
     * @param tab 
     * @param accountNo 
     * @param amdUnit 
     * @param billNo 
     * @param blackCaseId 
     * @param caseCreator 
     * @param caseStatus 
     * @param citizenId 
     * @param court 
     * @param customerId 
     * @param customerName 
     * @param customerStatus 
     * @param customerSurname 
     * @param debtTransferTo 
     * @param debtor 
     * @param deferDashboard 
     * @param deferExecDashboard 
     * @param kbdId 
     * @param lawyer 
     * @param legalStatus 
     * @param litigationCloseStatus 
     * @param litigationId 
     * @param loanType 
     * @param orgCode 
     * @param ownerId 
     * @param redCaseId 
     * @param responseUnit 
     * @param roomNo 
     * @param samFlag 
     * @param searchScope 
     * @param searchString 
     * @param sortBy sortBy
     * @param sortOrder sortOrder
     * @param statusDashboard 
     * @param tamcFlag 
     * @param writeOffStatus 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public litigationDefermentExecDownloadExcel(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, deferDashboard?: string, deferExecDashboard?: string, kbdId?: string, lawyer?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, sortBy?: Array<string>, sortOrder?: string, statusDashboard?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<PageOfLitigationDefermentDashboardExcelDto>;
    public litigationDefermentExecDownloadExcel(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, deferDashboard?: string, deferExecDashboard?: string, kbdId?: string, lawyer?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, sortBy?: Array<string>, sortOrder?: string, statusDashboard?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PageOfLitigationDefermentDashboardExcelDto>>;
    public litigationDefermentExecDownloadExcel(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, deferDashboard?: string, deferExecDashboard?: string, kbdId?: string, lawyer?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, sortBy?: Array<string>, sortOrder?: string, statusDashboard?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PageOfLitigationDefermentDashboardExcelDto>>;
    public litigationDefermentExecDownloadExcel(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, deferDashboard?: string, deferExecDashboard?: string, kbdId?: string, lawyer?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, sortBy?: Array<string>, sortOrder?: string, statusDashboard?: string, tamcFlag?: string, writeOffStatus?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (searchMode === null || searchMode === undefined) {
            throw new Error('Required parameter searchMode was null or undefined when calling litigationDefermentExecDownloadExcel.');
        }
        if (tab === null || tab === undefined) {
            throw new Error('Required parameter tab was null or undefined when calling litigationDefermentExecDownloadExcel.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (accountNo !== undefined && accountNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountNo, 'accountNo');
        }
        if (amdUnit !== undefined && amdUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>amdUnit, 'amdUnit');
        }
        if (billNo !== undefined && billNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>billNo, 'billNo');
        }
        if (blackCaseId !== undefined && blackCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blackCaseId, 'blackCaseId');
        }
        if (caseCreator !== undefined && caseCreator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseCreator, 'caseCreator');
        }
        if (caseStatus !== undefined && caseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseStatus, 'caseStatus');
        }
        if (citizenId !== undefined && citizenId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>citizenId, 'citizenId');
        }
        if (court !== undefined && court !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>court, 'court');
        }
        if (customerId !== undefined && customerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerId, 'customerId');
        }
        if (customerName !== undefined && customerName !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerName, 'customerName');
        }
        if (customerStatus !== undefined && customerStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerStatus, 'customerStatus');
        }
        if (customerSurname !== undefined && customerSurname !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerSurname, 'customerSurname');
        }
        if (debtTransferTo) {
            debtTransferTo.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'debtTransferTo');
            })
        }
        if (debtor !== undefined && debtor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>debtor, 'debtor');
        }
        if (deferDashboard !== undefined && deferDashboard !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>deferDashboard, 'deferDashboard');
        }
        if (deferExecDashboard !== undefined && deferExecDashboard !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>deferExecDashboard, 'deferExecDashboard');
        }
        if (kbdId !== undefined && kbdId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>kbdId, 'kbdId');
        }
        if (lawyer !== undefined && lawyer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lawyer, 'lawyer');
        }
        if (legalStatus !== undefined && legalStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>legalStatus, 'legalStatus');
        }
        if (litigationCloseStatus !== undefined && litigationCloseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationCloseStatus, 'litigationCloseStatus');
        }
        if (litigationId !== undefined && litigationId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationId, 'litigationId');
        }
        if (loanType) {
            loanType.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'loanType');
            })
        }
        if (orgCode !== undefined && orgCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>orgCode, 'orgCode');
        }
        if (ownerId !== undefined && ownerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ownerId, 'ownerId');
        }
        if (redCaseId !== undefined && redCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>redCaseId, 'redCaseId');
        }
        if (responseUnit !== undefined && responseUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>responseUnit, 'responseUnit');
        }
        if (roomNo !== undefined && roomNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>roomNo, 'roomNo');
        }
        if (samFlag !== undefined && samFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>samFlag, 'samFlag');
        }
        if (searchMode !== undefined && searchMode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchMode, 'searchMode');
        }
        if (searchScope !== undefined && searchScope !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchScope, 'searchScope');
        }
        if (searchString !== undefined && searchString !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchString, 'searchString');
        }
        if (sortBy) {
            sortBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sortBy');
            })
        }
        if (sortOrder !== undefined && sortOrder !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortOrder, 'sortOrder');
        }
        if (statusDashboard !== undefined && statusDashboard !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>statusDashboard, 'statusDashboard');
        }
        if (tab !== undefined && tab !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tab, 'tab');
        }
        if (tamcFlag !== undefined && tamcFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tamcFlag, 'tamcFlag');
        }
        if (writeOffStatus !== undefined && writeOffStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>writeOffStatus, 'writeOffStatus');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/workbench/deferment-exec/excel`;
        return this.httpClient.request<PageOfLitigationDefermentDashboardExcelDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * litigationStatusDownloadExcel
     * @param searchMode 
     * @param tab 
     * @param accountNo 
     * @param amdUnit 
     * @param billNo 
     * @param blackCaseId 
     * @param caseCreator 
     * @param caseStatus 
     * @param citizenId 
     * @param court 
     * @param customerId 
     * @param customerName 
     * @param customerStatus 
     * @param customerSurname 
     * @param debtTransferTo 
     * @param debtor 
     * @param deferDashboard 
     * @param deferExecDashboard 
     * @param kbdId 
     * @param lawyer 
     * @param legalStatus 
     * @param litigationCloseStatus 
     * @param litigationId 
     * @param loanType 
     * @param orgCode 
     * @param ownerId 
     * @param redCaseId 
     * @param responseUnit 
     * @param roomNo 
     * @param samFlag 
     * @param searchScope 
     * @param searchString 
     * @param sortBy sortBy
     * @param sortOrder sortOrder
     * @param statusDashboard 
     * @param tamcFlag 
     * @param writeOffStatus 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public litigationStatusDownloadExcel(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, deferDashboard?: string, deferExecDashboard?: string, kbdId?: string, lawyer?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, sortBy?: Array<string>, sortOrder?: string, statusDashboard?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<PageOfLitigationStatusDashboardExcelDto>;
    public litigationStatusDownloadExcel(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, deferDashboard?: string, deferExecDashboard?: string, kbdId?: string, lawyer?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, sortBy?: Array<string>, sortOrder?: string, statusDashboard?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PageOfLitigationStatusDashboardExcelDto>>;
    public litigationStatusDownloadExcel(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, deferDashboard?: string, deferExecDashboard?: string, kbdId?: string, lawyer?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, sortBy?: Array<string>, sortOrder?: string, statusDashboard?: string, tamcFlag?: string, writeOffStatus?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PageOfLitigationStatusDashboardExcelDto>>;
    public litigationStatusDownloadExcel(searchMode: 'BASIC' | 'ADVANCE' | 'LIST', tab: 'USER' | 'TEAM' | 'ORG' | 'CLOSED' | 'DASHBOARD', accountNo?: string, amdUnit?: string, billNo?: string, blackCaseId?: string, caseCreator?: string, caseStatus?: string, citizenId?: string, court?: string, customerId?: string, customerName?: string, customerStatus?: string, customerSurname?: string, debtTransferTo?: Array<string>, debtor?: string, deferDashboard?: string, deferExecDashboard?: string, kbdId?: string, lawyer?: string, legalStatus?: string, litigationCloseStatus?: string, litigationId?: string, loanType?: Array<string>, orgCode?: string, ownerId?: string, redCaseId?: string, responseUnit?: string, roomNo?: string, samFlag?: string, searchScope?: string, searchString?: string, sortBy?: Array<string>, sortOrder?: string, statusDashboard?: string, tamcFlag?: string, writeOffStatus?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (searchMode === null || searchMode === undefined) {
            throw new Error('Required parameter searchMode was null or undefined when calling litigationStatusDownloadExcel.');
        }
        if (tab === null || tab === undefined) {
            throw new Error('Required parameter tab was null or undefined when calling litigationStatusDownloadExcel.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (accountNo !== undefined && accountNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountNo, 'accountNo');
        }
        if (amdUnit !== undefined && amdUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>amdUnit, 'amdUnit');
        }
        if (billNo !== undefined && billNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>billNo, 'billNo');
        }
        if (blackCaseId !== undefined && blackCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>blackCaseId, 'blackCaseId');
        }
        if (caseCreator !== undefined && caseCreator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseCreator, 'caseCreator');
        }
        if (caseStatus !== undefined && caseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>caseStatus, 'caseStatus');
        }
        if (citizenId !== undefined && citizenId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>citizenId, 'citizenId');
        }
        if (court !== undefined && court !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>court, 'court');
        }
        if (customerId !== undefined && customerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerId, 'customerId');
        }
        if (customerName !== undefined && customerName !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerName, 'customerName');
        }
        if (customerStatus !== undefined && customerStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerStatus, 'customerStatus');
        }
        if (customerSurname !== undefined && customerSurname !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>customerSurname, 'customerSurname');
        }
        if (debtTransferTo) {
            debtTransferTo.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'debtTransferTo');
            })
        }
        if (debtor !== undefined && debtor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>debtor, 'debtor');
        }
        if (deferDashboard !== undefined && deferDashboard !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>deferDashboard, 'deferDashboard');
        }
        if (deferExecDashboard !== undefined && deferExecDashboard !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>deferExecDashboard, 'deferExecDashboard');
        }
        if (kbdId !== undefined && kbdId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>kbdId, 'kbdId');
        }
        if (lawyer !== undefined && lawyer !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lawyer, 'lawyer');
        }
        if (legalStatus !== undefined && legalStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>legalStatus, 'legalStatus');
        }
        if (litigationCloseStatus !== undefined && litigationCloseStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationCloseStatus, 'litigationCloseStatus');
        }
        if (litigationId !== undefined && litigationId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>litigationId, 'litigationId');
        }
        if (loanType) {
            loanType.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'loanType');
            })
        }
        if (orgCode !== undefined && orgCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>orgCode, 'orgCode');
        }
        if (ownerId !== undefined && ownerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ownerId, 'ownerId');
        }
        if (redCaseId !== undefined && redCaseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>redCaseId, 'redCaseId');
        }
        if (responseUnit !== undefined && responseUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>responseUnit, 'responseUnit');
        }
        if (roomNo !== undefined && roomNo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>roomNo, 'roomNo');
        }
        if (samFlag !== undefined && samFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>samFlag, 'samFlag');
        }
        if (searchMode !== undefined && searchMode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchMode, 'searchMode');
        }
        if (searchScope !== undefined && searchScope !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchScope, 'searchScope');
        }
        if (searchString !== undefined && searchString !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchString, 'searchString');
        }
        if (sortBy) {
            sortBy.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'sortBy');
            })
        }
        if (sortOrder !== undefined && sortOrder !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortOrder, 'sortOrder');
        }
        if (statusDashboard !== undefined && statusDashboard !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>statusDashboard, 'statusDashboard');
        }
        if (tab !== undefined && tab !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tab, 'tab');
        }
        if (tamcFlag !== undefined && tamcFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tamcFlag, 'tamcFlag');
        }
        if (writeOffStatus !== undefined && writeOffStatus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>writeOffStatus, 'writeOffStatus');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/workbench/status/excel`;
        return this.httpClient.request<PageOfLitigationStatusDashboardExcelDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * memoDelete
     * @param litigationId litigationId
     * @param memoId memoId
     * @param memoRequest memoRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public memoDelete(litigationId: string, memoId: string, memoRequest: MemoRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public memoDelete(litigationId: string, memoId: string, memoRequest: MemoRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public memoDelete(litigationId: string, memoId: string, memoRequest: MemoRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public memoDelete(litigationId: string, memoId: string, memoRequest: MemoRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (litigationId === null || litigationId === undefined) {
            throw new Error('Required parameter litigationId was null or undefined when calling memoDelete.');
        }
        if (memoId === null || memoId === undefined) {
            throw new Error('Required parameter memoId was null or undefined when calling memoDelete.');
        }
        if (memoRequest === null || memoRequest === undefined) {
            throw new Error('Required parameter memoRequest was null or undefined when calling memoDelete.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/${this.configuration.encodeParam({name: "litigationId", value: litigationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/memo-del/${this.configuration.encodeParam({name: "memoId", value: memoId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: memoRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * memoSave
     * @param litigationId litigationId
     * @param memoRequest memoRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public memoSave(litigationId: string, memoRequest: MemoRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public memoSave(litigationId: string, memoRequest: MemoRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public memoSave(litigationId: string, memoRequest: MemoRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public memoSave(litigationId: string, memoRequest: MemoRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (litigationId === null || litigationId === undefined) {
            throw new Error('Required parameter litigationId was null or undefined when calling memoSave.');
        }
        if (memoRequest === null || memoRequest === undefined) {
            throw new Error('Required parameter memoRequest was null or undefined when calling memoSave.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/${this.configuration.encodeParam({name: "litigationId", value: litigationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/memo-save`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: memoRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * memoUpdate
     * @param litigationId litigationId
     * @param memoId memoId
     * @param memoRequest memoRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public memoUpdate(litigationId: string, memoId: string, memoRequest: MemoRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public memoUpdate(litigationId: string, memoId: string, memoRequest: MemoRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public memoUpdate(litigationId: string, memoId: string, memoRequest: MemoRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public memoUpdate(litigationId: string, memoId: string, memoRequest: MemoRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (litigationId === null || litigationId === undefined) {
            throw new Error('Required parameter litigationId was null or undefined when calling memoUpdate.');
        }
        if (memoId === null || memoId === undefined) {
            throw new Error('Required parameter memoId was null or undefined when calling memoUpdate.');
        }
        if (memoRequest === null || memoRequest === undefined) {
            throw new Error('Required parameter memoRequest was null or undefined when calling memoUpdate.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/${this.configuration.encodeParam({name: "litigationId", value: litigationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/memo-update/${this.configuration.encodeParam({name: "memoId", value: memoId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: memoRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * mergeLitigation
     * @param litigationIds litigationIds
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mergeLitigation(litigationIds: Array<string>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<MergeLitigationResponse>;
    public mergeLitigation(litigationIds: Array<string>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<MergeLitigationResponse>>;
    public mergeLitigation(litigationIds: Array<string>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<MergeLitigationResponse>>;
    public mergeLitigation(litigationIds: Array<string>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (litigationIds === null || litigationIds === undefined) {
            throw new Error('Required parameter litigationIds was null or undefined when calling mergeLitigation.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (litigationIds) {
            litigationIds.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'litigationIds');
            })
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/merge`;
        return this.httpClient.request<MergeLitigationResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * processHeir
     * @param taskId taskId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public processHeir(taskId: number, request: HeirInfoRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public processHeir(taskId: number, request: HeirInfoRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public processHeir(taskId: number, request: HeirInfoRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public processHeir(taskId: number, request: HeirInfoRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling processHeir.');
        }
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling processHeir.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/${this.configuration.encodeParam({name: "taskId", value: taskId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/process-heir`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * processNotProsecute
     * @param taskId taskId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public processNotProsecute(taskId: number, request: HeirInfoRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public processNotProsecute(taskId: number, request: HeirInfoRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public processNotProsecute(taskId: number, request: HeirInfoRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public processNotProsecute(taskId: number, request: HeirInfoRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling processNotProsecute.');
        }
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling processNotProsecute.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/${this.configuration.encodeParam({name: "taskId", value: taskId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/process-not-prosecute`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * receiveDocuments
     * @param litigationId litigationId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public receiveDocuments(litigationId: string, request: DocumentReceiveRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<SendReceiveDocumentDto>;
    public receiveDocuments(litigationId: string, request: DocumentReceiveRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<SendReceiveDocumentDto>>;
    public receiveDocuments(litigationId: string, request: DocumentReceiveRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<SendReceiveDocumentDto>>;
    public receiveDocuments(litigationId: string, request: DocumentReceiveRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (litigationId === null || litigationId === undefined) {
            throw new Error('Required parameter litigationId was null or undefined when calling receiveDocuments.');
        }
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling receiveDocuments.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/${this.configuration.encodeParam({name: "litigationId", value: litigationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/documents/receive`;
        return this.httpClient.request<SendReceiveDocumentDto>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * reject
     * @param taskId taskId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reject(taskId: number, request: RejectRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public reject(taskId: number, request: RejectRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public reject(taskId: number, request: RejectRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public reject(taskId: number, request: RejectRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling reject.');
        }
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling reject.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/${this.configuration.encodeParam({name: "taskId", value: taskId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/reject`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * sendDocuments
     * @param litigationId litigationId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sendDocuments(litigationId: string, request: DocumentSendRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<SendReceiveDocumentDto>;
    public sendDocuments(litigationId: string, request: DocumentSendRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<SendReceiveDocumentDto>>;
    public sendDocuments(litigationId: string, request: DocumentSendRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<SendReceiveDocumentDto>>;
    public sendDocuments(litigationId: string, request: DocumentSendRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (litigationId === null || litigationId === undefined) {
            throw new Error('Required parameter litigationId was null or undefined when calling sendDocuments.');
        }
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling sendDocuments.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/${this.configuration.encodeParam({name: "litigationId", value: litigationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/documents/send`;
        return this.httpClient.request<SendReceiveDocumentDto>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * transferLitigation
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public transferLitigation(request: TransferLitigationRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public transferLitigation(request: TransferLitigationRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public transferLitigation(request: TransferLitigationRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public transferLitigation(request: TransferLitigationRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling transferLitigation.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/transfer`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * transferTaskUserOption
     * @param category category
     * @param keywords keywords
     * @param roleCode roleCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public transferTaskUserOption(category?: string, keywords?: string, roleCode?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<LexsUserTransferOption>>;
    public transferTaskUserOption(category?: string, keywords?: string, roleCode?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<LexsUserTransferOption>>>;
    public transferTaskUserOption(category?: string, keywords?: string, roleCode?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<LexsUserTransferOption>>>;
    public transferTaskUserOption(category?: string, keywords?: string, roleCode?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (category !== undefined && category !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>category, 'category');
        }
        if (keywords !== undefined && keywords !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>keywords, 'keywords');
        }
        if (roleCode !== undefined && roleCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>roleCode, 'roleCode');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/transfer/options`;
        return this.httpClient.request<Array<LexsUserTransferOption>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateAdditionalPersons
     * @param litigationId litigationId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAdditionalPersons(litigationId: string, request: PersonInfoRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public updateAdditionalPersons(litigationId: string, request: PersonInfoRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public updateAdditionalPersons(litigationId: string, request: PersonInfoRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public updateAdditionalPersons(litigationId: string, request: PersonInfoRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (litigationId === null || litigationId === undefined) {
            throw new Error('Required parameter litigationId was null or undefined when calling updateAdditionalPersons.');
        }
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateAdditionalPersons.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/${this.configuration.encodeParam({name: "litigationId", value: litigationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/additional-persons`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateAdditionalPersonsBlackCase
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAdditionalPersonsBlackCase(request: PersonLitigationInfoRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public updateAdditionalPersonsBlackCase(request: PersonLitigationInfoRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public updateAdditionalPersonsBlackCase(request: PersonLitigationInfoRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public updateAdditionalPersonsBlackCase(request: PersonLitigationInfoRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateAdditionalPersonsBlackCase.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/additional-persons-blackcase`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateAssets
     * @param litigationId litigationId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAssets(litigationId: string, request: CollateralInfoRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public updateAssets(litigationId: string, request: CollateralInfoRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public updateAssets(litigationId: string, request: CollateralInfoRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public updateAssets(litigationId: string, request: CollateralInfoRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (litigationId === null || litigationId === undefined) {
            throw new Error('Required parameter litigationId was null or undefined when calling updateAssets.');
        }
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateAssets.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/${this.configuration.encodeParam({name: "litigationId", value: litigationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/assets`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateDocuments
     * @param litigationId litigationId
     * @param docInfoReq docInfoReq
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateDocuments(litigationId: string, docInfoReq: DocumentInfoRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<DocumentDto>>;
    public updateDocuments(litigationId: string, docInfoReq: DocumentInfoRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<DocumentDto>>>;
    public updateDocuments(litigationId: string, docInfoReq: DocumentInfoRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<DocumentDto>>>;
    public updateDocuments(litigationId: string, docInfoReq: DocumentInfoRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (litigationId === null || litigationId === undefined) {
            throw new Error('Required parameter litigationId was null or undefined when calling updateDocuments.');
        }
        if (docInfoReq === null || docInfoReq === undefined) {
            throw new Error('Required parameter docInfoReq was null or undefined when calling updateDocuments.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/${this.configuration.encodeParam({name: "litigationId", value: litigationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/documents`;
        return this.httpClient.request<Array<DocumentDto>>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: docInfoReq,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateFollowUp
     * @param litigationId litigationId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateFollowUp(litigationId: string, request: LitigationFollowupDto, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public updateFollowUp(litigationId: string, request: LitigationFollowupDto, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public updateFollowUp(litigationId: string, request: LitigationFollowupDto, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public updateFollowUp(litigationId: string, request: LitigationFollowupDto, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (litigationId === null || litigationId === undefined) {
            throw new Error('Required parameter litigationId was null or undefined when calling updateFollowUp.');
        }
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateFollowUp.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/${this.configuration.encodeParam({name: "litigationId", value: litigationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/followup`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateSubAccounts
     * @param litigationId litigationId
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateSubAccounts(litigationId: string, request: UpdateSubAccountRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public updateSubAccounts(litigationId: string, request: UpdateSubAccountRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public updateSubAccounts(litigationId: string, request: UpdateSubAccountRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public updateSubAccounts(litigationId: string, request: UpdateSubAccountRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (litigationId === null || litigationId === undefined) {
            throw new Error('Required parameter litigationId was null or undefined when calling updateSubAccounts.');
        }
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateSubAccounts.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/litigation/${this.configuration.encodeParam({name: "litigationId", value: litigationId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/subaccounts`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: request,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
