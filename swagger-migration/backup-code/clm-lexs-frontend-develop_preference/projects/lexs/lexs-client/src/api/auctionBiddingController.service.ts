/**
 * KTB Backend for Frontend APIs.
 *
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { AuctionBiddingCollateralsSummaryResponse } from '../model/auctionBiddingCollateralsSummaryResponse';
// @ts-ignore
import { AuctionBiddingDeedGroupResponse } from '../model/auctionBiddingDeedGroupResponse';
// @ts-ignore
import { AuctionBiddingDocumentRequest } from '../model/auctionBiddingDocumentRequest';
// @ts-ignore
import { AuctionBiddingDocumentResponse } from '../model/auctionBiddingDocumentResponse';
// @ts-ignore
import { AuctionBiddingResultRecordingTasksSubmitRequest } from '../model/auctionBiddingResultRecordingTasksSubmitRequest';
// @ts-ignore
import { AuctionBiddingResultRecordingTasksSubmitResponse } from '../model/auctionBiddingResultRecordingTasksSubmitResponse';
// @ts-ignore
import { AuctionBiddingResultResponse } from '../model/auctionBiddingResultResponse';
// @ts-ignore
import { AuctionBiddingResultsRequest } from '../model/auctionBiddingResultsRequest';
// @ts-ignore
import { AuctionBiddingResultsResponse } from '../model/auctionBiddingResultsResponse';
// @ts-ignore
import { AuctionBiddingsAnnouncesResponse } from '../model/auctionBiddingsAnnouncesResponse';
// @ts-ignore
import { BiddingsDocumentsUploadRequest } from '../model/biddingsDocumentsUploadRequest';
// @ts-ignore
import { BiddingsDocumentsUploadResponse } from '../model/biddingsDocumentsUploadResponse';
// @ts-ignore
import { InquiryBiddingCollateralResponse } from '../model/inquiryBiddingCollateralResponse';
// @ts-ignore
import { InquiryDeedGroupResponse } from '../model/inquiryDeedGroupResponse';
// @ts-ignore
import { LatestPublicAuctionBiddingResponse } from '../model/latestPublicAuctionBiddingResponse';
// @ts-ignore
import { UploadTrackingRequest } from '../model/uploadTrackingRequest';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class AuctionBiddingControllerService {

    protected basePath = 'https://lexsdev.krungthai/ktb/rest/lexs';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * @param aucBiddingId 
     * @param auctionBiddingResultsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public auctionBiddingResult(aucBiddingId: string, auctionBiddingResultsRequest: AuctionBiddingResultsRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AuctionBiddingResultsResponse>;
    public auctionBiddingResult(aucBiddingId: string, auctionBiddingResultsRequest: AuctionBiddingResultsRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AuctionBiddingResultsResponse>>;
    public auctionBiddingResult(aucBiddingId: string, auctionBiddingResultsRequest: AuctionBiddingResultsRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AuctionBiddingResultsResponse>>;
    public auctionBiddingResult(aucBiddingId: string, auctionBiddingResultsRequest: AuctionBiddingResultsRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (aucBiddingId === null || aucBiddingId === undefined) {
            throw new Error('Required parameter aucBiddingId was null or undefined when calling auctionBiddingResult.');
        }
        if (auctionBiddingResultsRequest === null || auctionBiddingResultsRequest === undefined) {
            throw new Error('Required parameter auctionBiddingResultsRequest was null or undefined when calling auctionBiddingResult.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/biddings/${this.configuration.encodeParam({name: "aucBiddingId", value: aucBiddingId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/result`;
        return this.httpClient.request<AuctionBiddingResultsResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: auctionBiddingResultsRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param aucBiddingId 
     * @param taskId 
     * @param auctionBiddingResultRecordingTasksSubmitRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public auctionBiddingResultRecordingTasksSubmit(aucBiddingId: string, taskId: number, auctionBiddingResultRecordingTasksSubmitRequest: AuctionBiddingResultRecordingTasksSubmitRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AuctionBiddingResultRecordingTasksSubmitResponse>;
    public auctionBiddingResultRecordingTasksSubmit(aucBiddingId: string, taskId: number, auctionBiddingResultRecordingTasksSubmitRequest: AuctionBiddingResultRecordingTasksSubmitRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AuctionBiddingResultRecordingTasksSubmitResponse>>;
    public auctionBiddingResultRecordingTasksSubmit(aucBiddingId: string, taskId: number, auctionBiddingResultRecordingTasksSubmitRequest: AuctionBiddingResultRecordingTasksSubmitRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AuctionBiddingResultRecordingTasksSubmitResponse>>;
    public auctionBiddingResultRecordingTasksSubmit(aucBiddingId: string, taskId: number, auctionBiddingResultRecordingTasksSubmitRequest: AuctionBiddingResultRecordingTasksSubmitRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (aucBiddingId === null || aucBiddingId === undefined) {
            throw new Error('Required parameter aucBiddingId was null or undefined when calling auctionBiddingResultRecordingTasksSubmit.');
        }
        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling auctionBiddingResultRecordingTasksSubmit.');
        }
        if (auctionBiddingResultRecordingTasksSubmitRequest === null || auctionBiddingResultRecordingTasksSubmitRequest === undefined) {
            throw new Error('Required parameter auctionBiddingResultRecordingTasksSubmitRequest was null or undefined when calling auctionBiddingResultRecordingTasksSubmit.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/biddings/${this.configuration.encodeParam({name: "aucBiddingId", value: aucBiddingId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/result-recording/tasks/${this.configuration.encodeParam({name: "taskId", value: taskId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/submit`;
        return this.httpClient.request<AuctionBiddingResultRecordingTasksSubmitResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: auctionBiddingResultRecordingTasksSubmitRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * biddingsDeedGroupsDocumentsUpload
     * @param aucBiddingDeedGroupId aucBiddingDeedGroupId
     * @param aucBiddingId aucBiddingId
     * @param documentGroup documentGroup
     * @param documentTemplateId documentTemplateId
     * @param file file
     * @param documentGroup2 
     * @param documentTemplateId2 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public biddingsDeedGroupsDocumentsUpload(aucBiddingDeedGroupId: number, aucBiddingId: string, documentGroup: string, documentTemplateId: string, file: Blob, documentGroup2?: string, documentTemplateId2?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<BiddingsDocumentsUploadResponse>;
    public biddingsDeedGroupsDocumentsUpload(aucBiddingDeedGroupId: number, aucBiddingId: string, documentGroup: string, documentTemplateId: string, file: Blob, documentGroup2?: string, documentTemplateId2?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<BiddingsDocumentsUploadResponse>>;
    public biddingsDeedGroupsDocumentsUpload(aucBiddingDeedGroupId: number, aucBiddingId: string, documentGroup: string, documentTemplateId: string, file: Blob, documentGroup2?: string, documentTemplateId2?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<BiddingsDocumentsUploadResponse>>;
    public biddingsDeedGroupsDocumentsUpload(aucBiddingDeedGroupId: number, aucBiddingId: string, documentGroup: string, documentTemplateId: string, file: Blob, documentGroup2?: string, documentTemplateId2?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (aucBiddingDeedGroupId === null || aucBiddingDeedGroupId === undefined) {
            throw new Error('Required parameter aucBiddingDeedGroupId was null or undefined when calling biddingsDeedGroupsDocumentsUpload.');
        }
        if (aucBiddingId === null || aucBiddingId === undefined) {
            throw new Error('Required parameter aucBiddingId was null or undefined when calling biddingsDeedGroupsDocumentsUpload.');
        }
        if (documentGroup === null || documentGroup === undefined) {
            throw new Error('Required parameter documentGroup was null or undefined when calling biddingsDeedGroupsDocumentsUpload.');
        }
        if (documentTemplateId === null || documentTemplateId === undefined) {
            throw new Error('Required parameter documentTemplateId was null or undefined when calling biddingsDeedGroupsDocumentsUpload.');
        }
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling biddingsDeedGroupsDocumentsUpload.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (documentGroup !== undefined && documentGroup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>documentGroup, 'documentGroup');
        }
        if (documentGroup2 !== undefined && documentGroup2 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>documentGroup2, 'documentGroup');
        }
        if (documentTemplateId !== undefined && documentTemplateId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>documentTemplateId, 'documentTemplateId');
        }
        if (documentTemplateId2 !== undefined && documentTemplateId2 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>documentTemplateId2, 'documentTemplateId');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (file !== undefined) {
            localVarFormParams = localVarFormParams.append('file', <any>file) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/biddings/${this.configuration.encodeParam({name: "aucBiddingId", value: aucBiddingId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/deed-groups/${this.configuration.encodeParam({name: "aucBiddingDeedGroupId", value: aucBiddingDeedGroupId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/documents/upload`;
        return this.httpClient.request<BiddingsDocumentsUploadResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * biddingsDocumentsUpload
     * @param aucBiddingId aucBiddingId
     * @param documentGroup documentGroup
     * @param documentTemplateId documentTemplateId
     * @param file file
     * @param documentGroup2 
     * @param documentTemplateId2 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public biddingsDocumentsUpload(aucBiddingId: string, documentGroup: string, documentTemplateId: string, file: Blob, documentGroup2?: string, documentTemplateId2?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<BiddingsDocumentsUploadResponse>;
    public biddingsDocumentsUpload(aucBiddingId: string, documentGroup: string, documentTemplateId: string, file: Blob, documentGroup2?: string, documentTemplateId2?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<BiddingsDocumentsUploadResponse>>;
    public biddingsDocumentsUpload(aucBiddingId: string, documentGroup: string, documentTemplateId: string, file: Blob, documentGroup2?: string, documentTemplateId2?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<BiddingsDocumentsUploadResponse>>;
    public biddingsDocumentsUpload(aucBiddingId: string, documentGroup: string, documentTemplateId: string, file: Blob, documentGroup2?: string, documentTemplateId2?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (aucBiddingId === null || aucBiddingId === undefined) {
            throw new Error('Required parameter aucBiddingId was null or undefined when calling biddingsDocumentsUpload.');
        }
        if (documentGroup === null || documentGroup === undefined) {
            throw new Error('Required parameter documentGroup was null or undefined when calling biddingsDocumentsUpload.');
        }
        if (documentTemplateId === null || documentTemplateId === undefined) {
            throw new Error('Required parameter documentTemplateId was null or undefined when calling biddingsDocumentsUpload.');
        }
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling biddingsDocumentsUpload.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (documentGroup !== undefined && documentGroup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>documentGroup, 'documentGroup');
        }
        if (documentGroup2 !== undefined && documentGroup2 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>documentGroup2, 'documentGroup');
        }
        if (documentTemplateId !== undefined && documentTemplateId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>documentTemplateId, 'documentTemplateId');
        }
        if (documentTemplateId2 !== undefined && documentTemplateId2 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>documentTemplateId2, 'documentTemplateId');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (file !== undefined) {
            localVarFormParams = localVarFormParams.append('file', <any>file) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/biddings/${this.configuration.encodeParam({name: "aucBiddingId", value: aucBiddingId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/documents/upload`;
        return this.httpClient.request<BiddingsDocumentsUploadResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteBiddingDocuments
     * @param aucBiddingDeedGroupId aucBiddingDeedGroupId
     * @param aucBiddingId aucBiddingId
     * @param documentGroup documentGroup
     * @param documentTemplateId documentTemplateId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteBiddingDocuments(aucBiddingDeedGroupId: number, aucBiddingId: string, documentGroup: string, documentTemplateId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<BiddingsDocumentsUploadResponse>;
    public deleteBiddingDocuments(aucBiddingDeedGroupId: number, aucBiddingId: string, documentGroup: string, documentTemplateId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<BiddingsDocumentsUploadResponse>>;
    public deleteBiddingDocuments(aucBiddingDeedGroupId: number, aucBiddingId: string, documentGroup: string, documentTemplateId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<BiddingsDocumentsUploadResponse>>;
    public deleteBiddingDocuments(aucBiddingDeedGroupId: number, aucBiddingId: string, documentGroup: string, documentTemplateId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (aucBiddingDeedGroupId === null || aucBiddingDeedGroupId === undefined) {
            throw new Error('Required parameter aucBiddingDeedGroupId was null or undefined when calling deleteBiddingDocuments.');
        }
        if (aucBiddingId === null || aucBiddingId === undefined) {
            throw new Error('Required parameter aucBiddingId was null or undefined when calling deleteBiddingDocuments.');
        }
        if (documentGroup === null || documentGroup === undefined) {
            throw new Error('Required parameter documentGroup was null or undefined when calling deleteBiddingDocuments.');
        }
        if (documentTemplateId === null || documentTemplateId === undefined) {
            throw new Error('Required parameter documentTemplateId was null or undefined when calling deleteBiddingDocuments.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (documentGroup !== undefined && documentGroup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>documentGroup, 'documentGroup');
        }
        if (documentTemplateId !== undefined && documentTemplateId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>documentTemplateId, 'documentTemplateId');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/biddings/${this.configuration.encodeParam({name: "aucBiddingId", value: aucBiddingId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/deed-groups/${this.configuration.encodeParam({name: "aucBiddingDeedGroupId", value: aucBiddingDeedGroupId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/documents`;
        return this.httpClient.request<BiddingsDocumentsUploadResponse>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteBiddingDocuments
     * @param aucBiddingId aucBiddingId
     * @param documentGroup documentGroup
     * @param documentTemplateId documentTemplateId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteBiddingDocuments_1(aucBiddingId: string, documentGroup: string, documentTemplateId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<BiddingsDocumentsUploadResponse>;
    public deleteBiddingDocuments_1(aucBiddingId: string, documentGroup: string, documentTemplateId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<BiddingsDocumentsUploadResponse>>;
    public deleteBiddingDocuments_1(aucBiddingId: string, documentGroup: string, documentTemplateId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<BiddingsDocumentsUploadResponse>>;
    public deleteBiddingDocuments_1(aucBiddingId: string, documentGroup: string, documentTemplateId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (aucBiddingId === null || aucBiddingId === undefined) {
            throw new Error('Required parameter aucBiddingId was null or undefined when calling deleteBiddingDocuments_1.');
        }
        if (documentGroup === null || documentGroup === undefined) {
            throw new Error('Required parameter documentGroup was null or undefined when calling deleteBiddingDocuments_1.');
        }
        if (documentTemplateId === null || documentTemplateId === undefined) {
            throw new Error('Required parameter documentTemplateId was null or undefined when calling deleteBiddingDocuments_1.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (documentGroup !== undefined && documentGroup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>documentGroup, 'documentGroup');
        }
        if (documentTemplateId !== undefined && documentTemplateId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>documentTemplateId, 'documentTemplateId');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/biddings/${this.configuration.encodeParam({name: "aucBiddingId", value: aucBiddingId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/documents`;
        return this.httpClient.request<BiddingsDocumentsUploadResponse>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param aucRef 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAuctionBiddingAnnounceResult(aucRef: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AuctionBiddingsAnnouncesResponse>;
    public getAuctionBiddingAnnounceResult(aucRef: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AuctionBiddingsAnnouncesResponse>>;
    public getAuctionBiddingAnnounceResult(aucRef: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AuctionBiddingsAnnouncesResponse>>;
    public getAuctionBiddingAnnounceResult(aucRef: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (aucRef === null || aucRef === undefined) {
            throw new Error('Required parameter aucRef was null or undefined when calling getAuctionBiddingAnnounceResult.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/biddings/announces/${this.configuration.encodeParam({name: "aucRef", value: aucRef, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/bidding-announce`;
        return this.httpClient.request<AuctionBiddingsAnnouncesResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param aucRef 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAuctionBiddingCollateralsSummary(aucRef: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AuctionBiddingCollateralsSummaryResponse>;
    public getAuctionBiddingCollateralsSummary(aucRef: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AuctionBiddingCollateralsSummaryResponse>>;
    public getAuctionBiddingCollateralsSummary(aucRef: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AuctionBiddingCollateralsSummaryResponse>>;
    public getAuctionBiddingCollateralsSummary(aucRef: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (aucRef === null || aucRef === undefined) {
            throw new Error('Required parameter aucRef was null or undefined when calling getAuctionBiddingCollateralsSummary.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/biddings/announces/${this.configuration.encodeParam({name: "aucRef", value: aucRef, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/bidding-collaterals/summary`;
        return this.httpClient.request<AuctionBiddingCollateralsSummaryResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param aucBiddingId 
     * @param deedGroupId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAuctionBiddingDeedGroup(aucBiddingId: string, deedGroupId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AuctionBiddingDeedGroupResponse>;
    public getAuctionBiddingDeedGroup(aucBiddingId: string, deedGroupId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AuctionBiddingDeedGroupResponse>>;
    public getAuctionBiddingDeedGroup(aucBiddingId: string, deedGroupId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AuctionBiddingDeedGroupResponse>>;
    public getAuctionBiddingDeedGroup(aucBiddingId: string, deedGroupId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (aucBiddingId === null || aucBiddingId === undefined) {
            throw new Error('Required parameter aucBiddingId was null or undefined when calling getAuctionBiddingDeedGroup.');
        }
        if (deedGroupId === null || deedGroupId === undefined) {
            throw new Error('Required parameter deedGroupId was null or undefined when calling getAuctionBiddingDeedGroup.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/biddings/${this.configuration.encodeParam({name: "aucBiddingId", value: aucBiddingId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/deed-groups/${this.configuration.encodeParam({name: "deedGroupId", value: deedGroupId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/result`;
        return this.httpClient.request<AuctionBiddingDeedGroupResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param aucBiddingId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAuctionBiddingResultResponse(aucBiddingId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AuctionBiddingResultResponse>;
    public getAuctionBiddingResultResponse(aucBiddingId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AuctionBiddingResultResponse>>;
    public getAuctionBiddingResultResponse(aucBiddingId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AuctionBiddingResultResponse>>;
    public getAuctionBiddingResultResponse(aucBiddingId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (aucBiddingId === null || aucBiddingId === undefined) {
            throw new Error('Required parameter aucBiddingId was null or undefined when calling getAuctionBiddingResultResponse.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/biddings/${this.configuration.encodeParam({name: "aucBiddingId", value: aucBiddingId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/result`;
        return this.httpClient.request<AuctionBiddingResultResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param aucBiddingId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLatestPublicAuctionBidding(aucBiddingId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<LatestPublicAuctionBiddingResponse>;
    public getLatestPublicAuctionBidding(aucBiddingId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<LatestPublicAuctionBiddingResponse>>;
    public getLatestPublicAuctionBidding(aucBiddingId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<LatestPublicAuctionBiddingResponse>>;
    public getLatestPublicAuctionBidding(aucBiddingId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (aucBiddingId === null || aucBiddingId === undefined) {
            throw new Error('Required parameter aucBiddingId was null or undefined when calling getLatestPublicAuctionBidding.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/biddings/${this.configuration.encodeParam({name: "aucBiddingId", value: aucBiddingId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/info`;
        return this.httpClient.request<LatestPublicAuctionBiddingResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param aucRef 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public inquiryBiddingCollaterals(aucRef: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<InquiryBiddingCollateralResponse>;
    public inquiryBiddingCollaterals(aucRef: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<InquiryBiddingCollateralResponse>>;
    public inquiryBiddingCollaterals(aucRef: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<InquiryBiddingCollateralResponse>>;
    public inquiryBiddingCollaterals(aucRef: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (aucRef === null || aucRef === undefined) {
            throw new Error('Required parameter aucRef was null or undefined when calling inquiryBiddingCollaterals.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/biddings/announces/${this.configuration.encodeParam({name: "aucRef", value: aucRef, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/bidding-collaterals`;
        return this.httpClient.request<InquiryBiddingCollateralResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param aucRef 
     * @param deedGroupId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public inquiryBiddingCollateralsByDeedGroupId(aucRef: number, deedGroupId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<InquiryDeedGroupResponse>;
    public inquiryBiddingCollateralsByDeedGroupId(aucRef: number, deedGroupId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<InquiryDeedGroupResponse>>;
    public inquiryBiddingCollateralsByDeedGroupId(aucRef: number, deedGroupId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<InquiryDeedGroupResponse>>;
    public inquiryBiddingCollateralsByDeedGroupId(aucRef: number, deedGroupId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (aucRef === null || aucRef === undefined) {
            throw new Error('Required parameter aucRef was null or undefined when calling inquiryBiddingCollateralsByDeedGroupId.');
        }
        if (deedGroupId === null || deedGroupId === undefined) {
            throw new Error('Required parameter deedGroupId was null or undefined when calling inquiryBiddingCollateralsByDeedGroupId.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/biddings/announces/${this.configuration.encodeParam({name: "aucRef", value: aucRef, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/bidding-collaterals/${this.configuration.encodeParam({name: "deedGroupId", value: deedGroupId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}`;
        return this.httpClient.request<InquiryDeedGroupResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param aucBiddingId 
     * @param deedGroupId 
     * @param auctionBiddingDocumentRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateBiddingByAucBiddingIdAndDeedGroupId(aucBiddingId: string, deedGroupId: number, auctionBiddingDocumentRequest: AuctionBiddingDocumentRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AuctionBiddingDocumentResponse>;
    public updateBiddingByAucBiddingIdAndDeedGroupId(aucBiddingId: string, deedGroupId: number, auctionBiddingDocumentRequest: AuctionBiddingDocumentRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AuctionBiddingDocumentResponse>>;
    public updateBiddingByAucBiddingIdAndDeedGroupId(aucBiddingId: string, deedGroupId: number, auctionBiddingDocumentRequest: AuctionBiddingDocumentRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AuctionBiddingDocumentResponse>>;
    public updateBiddingByAucBiddingIdAndDeedGroupId(aucBiddingId: string, deedGroupId: number, auctionBiddingDocumentRequest: AuctionBiddingDocumentRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (aucBiddingId === null || aucBiddingId === undefined) {
            throw new Error('Required parameter aucBiddingId was null or undefined when calling updateBiddingByAucBiddingIdAndDeedGroupId.');
        }
        if (deedGroupId === null || deedGroupId === undefined) {
            throw new Error('Required parameter deedGroupId was null or undefined when calling updateBiddingByAucBiddingIdAndDeedGroupId.');
        }
        if (auctionBiddingDocumentRequest === null || auctionBiddingDocumentRequest === undefined) {
            throw new Error('Required parameter auctionBiddingDocumentRequest was null or undefined when calling updateBiddingByAucBiddingIdAndDeedGroupId.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Authorization) required
        localVarCredential = this.configuration.lookupCredential('Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/auction/biddings/${this.configuration.encodeParam({name: "aucBiddingId", value: aucBiddingId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/deed-groups/${this.configuration.encodeParam({name: "deedGroupId", value: deedGroupId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/returnDocument`;
        return this.httpClient.request<AuctionBiddingDocumentResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: auctionBiddingDocumentRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
